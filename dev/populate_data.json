[{"tests": [{"date": "2017-07-20T14:41:17.335790", "description": "Teste b\u00e1sico", "key": "LFmeLeWjA", "input": "programacao\namo", "owner": "matheusgr@gmail.com", "output": "amo\nprogramacao", "tip": "", "publish": true}, {"date": "2017-07-20T14:41:17.403920", "description": "Iguais", "key": "M3XffO1Ee", "input": "abc\ndef", "owner": "matheusgr@gmail.com", "output": "abc\nabc", "tip": "", "publish": true}, {"date": "2017-07-20T14:41:17.470790", "description": "teste 2", "key": "UeMqyz9Sy", "input": "abobora\npro", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2017-07-20T14:41:17.531170", "description": "Teste de maior", "key": "SzYmleOOW", "input": "pro\nabobora", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2017-07-20T14:41:17.594320", "description": "basico invertido", "key": "SFIJXUBKy", "input": "amo\nprogramacao", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}], "date": "2017-07-20T14:41:17.682850", "name": "Maior e menor de duas palavras", "tags": [], "tip": "", "publish": true, "canceled": false, "key": "LGRuJsN1c", "owner": "matheusgr@gmail.com", "description": "Um programa passa para o usu\u00e1rio 2 palavras e pede que o usu\u00e1rio imprima a maior e a menor palavra encontrada. Em caso de existirem palavras igualmente grandes ou pequenas a primeira palavra colocada como entrada deve ser imprimida."}, {"tests": [{"date": "2017-07-20T04:38:52.339210", "description": "Vermelho!", "key": "QfnJYxKT2", "input": "255\n0\n0", "owner": "matheusgr@gmail.com", "output": "PRETO", "tip": "", "publish": true}, {"date": "2017-07-20T04:38:52.621620", "description": "No limite..", "key": "Npzzx7slk", "input": "128\n128\n128", "owner": "matheusgr@gmail.com", "output": "BRANCO", "tip": "", "publish": true}, {"date": "2017-07-20T04:38:52.693980", "description": "s\u00f3 n\u00e3o vermelho", "key": "SU6jMHMKO", "input": "127\n128\n128", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2017-07-20T04:38:52.776730", "description": "s\u00f3 n\u00e3o verde", "key": "OwXmiJ5pg", "input": "128\n127\n128", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2017-07-20T04:38:52.876290", "description": "s\u00f3 n\u00e3o azul", "key": "QaH1BtrXM", "input": "128\n128\n127", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2017-07-20T04:38:52.952470", "description": "Branco", "key": "SavKz4aOm", "input": "255\n255\n255", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}], "date": "2017-07-20T04:38:53.027050", "name": "Representa\u00e7\u00e3o de cores", "tags": [], "tip": "", "publish": true, "canceled": false, "key": "NTrqde6Ma", "owner": "matheusgr@gmail.com", "description": "Toda imagem \u00e9 representada por pixels (pontos gr\u00e1ficos) que carregam informa\u00e7\u00f5es de cor. Tradicionalmente, cada pixel \u00e9 definido pelas cores vermelho, verde e azul e um valor entre 0 e 255 (inclusive) associado a cada uma delas. Quanto mais escuro um pixel, menor o valor de vermelho, verde e azul que esse pixel tem.\n\nQuando se deseja aplicar um filtro de cores, o que se costuma fazer \u00e9 alterar tais valores de forma que a cor da imagem \u00e9 alterada. Um exemplo de filtro cl\u00e1ssico \u00e9 o \"preto e branco\". Quando se deseja transformar uma imagem colorida em preto e branco, uma alternativa \u00e9 pegar cada pixel e, se o valor de vermelho, verde ou azul dela for menor do que 128, o pixel \u00e9 convertido para preto. Se, no entanto, esses tr\u00eas valores estiverem acima de 128, o pixel \u00e9 convertido para branco.\n\nFa\u00e7a um programa que representa 3 entradas, R G B, entre 0 e 255. Se pelo menos um dos valores estiver abaixo de 128, o programa deve imprimir PRETO indicando que aquele pixel deve ser convertido para preto. Caso os 3 valores estejam igual ou acima de 128, o programa deve exibir BRANCO. Veja o exemplo."}, {"tests": [{"date": "2017-07-20T04:26:42.228790", "description": "Objeto 1 = posi\u00e7\u00e3o 4, velocidade 4, Objeto 2  = posi\u00e7\u00e3o 0, velocidade 8, tempo = 1", "key": "OgOHLpOng", "input": "4\n4\n0\n8\n1", "owner": "matheusgr@gmail.com", "output": "0", "tip": "", "publish": true}, {"date": "2017-07-20T04:26:42.325710", "description": "Objeto 1 = posi\u00e7\u00e3o 4, velocidade 4, Objeto 2  = posi\u00e7\u00e3o 0, velocidade 8, tempo = 2", "key": "Tzfrc9MA4", "input": "4\n4\n0\n8\n2", "owner": "matheusgr@gmail.com", "output": "4", "tip": "", "publish": true}, {"date": "2017-07-20T04:26:42.456640", "description": "1", "key": "UFlIhCney", "input": "0\n1\n0\n2\n10", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2017-07-20T04:26:42.529720", "description": "2", "key": "Oot8K4mQK", "input": "0\n2\n0\n1\n10", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2017-07-20T04:26:42.611200", "description": "igual", "key": "MS6uYthA0", "input": "0\n5\n5\n0\n1", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}], "date": "2017-07-20T04:26:42.673640", "name": "SorVeTe", "tags": [], "tip": "", "publish": true, "canceled": false, "key": "PxHb44qWm", "owner": "matheusgr@gmail.com", "description": "Quando calculamos a posi\u00e7\u00e3o de um objeto em movimento uniforme linear, costumamos avaliar para isso a posi\u00e7\u00e3o inicial daquele objeto bem como sua velocidade e o tempo decorrido.\n\nUm objeto que estava na posi\u00e7\u00e3o 0km e estava a velocidade de 5 km/h estara, em uma hora, na posi\u00e7\u00e3o 5km.\n\nFa\u00e7a um programa que receba 5 entradas: a posi\u00e7\u00e3o inicial e velocidade do objeto 1, a posi\u00e7\u00e3o inicial e velocidade do objeto 2, e por fim o tempo decorrido.\n\nSeu programa deve indicar a diferen\u00e7a absoluta da dist\u00e2ncia final entre os dois objetos."}, {"tests": [{"date": "2017-07-20T04:17:13.507610", "description": "banana e buena s\u00e3o po\u00e9ticas (come\u00e7am iguais e terminam com a mesma letra)", "key": "OwrNEltYW", "input": "banana\nbuena", "owner": "matheusgr@gmail.com", "output": "S", "tip": "", "publish": true}, {"date": "2017-07-20T04:17:13.635780", "description": "banana e bueno n\u00e3o s\u00e3o po\u00e9ticas (come\u00e7am iguais, mas n\u00e3o terminam de mesma forma)", "key": "TzH0Nx2RM", "input": "banana\nbueno", "owner": "matheusgr@gmail.com", "output": "N", "tip": "", "publish": true}, {"date": "2017-07-20T04:17:13.701220", "description": "come\u00e7a diferente, termina igual", "key": "MPAdBzmxE", "input": "abcdefg\nbcdefg", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2017-07-20T04:17:13.798360", "description": "Palavras iguais s\u00e3o sempre po\u00e9ticas", "key": "P6j1NkyGG", "input": "abcdefg\nabcdefg", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2017-07-20T04:17:13.910940", "description": "Subpalavra po\u00e9tica", "key": "ROkBOp7aa", "input": "abcdefg\nag", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2017-07-20T04:17:14.324220", "description": "Subpalavra poetica (2)", "key": "UBo5JzLvs", "input": "ag\nabcdefg", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2017-07-20T04:17:14.410190", "description": "n\u00e3o s\u00e3o po\u00e9ticas", "key": "MRHMPrrkW", "input": "gh\nij", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}], "date": "2017-07-20T04:17:14.527530", "name": "Palavras Po\u00e9ticas", "tags": [], "tip": "", "publish": true, "canceled": false, "key": "Soz38f6v2", "owner": "matheusgr@gmail.com", "description": "Theus e T\u00e1ta defeniram que duas palavras s\u00e3o po\u00e9ticas quando elas come\u00e7am e terminam a mesma letra. Eles precisam avaliar se um texto faz uso de rimas baseadas em palavras po\u00e9ticas e, para isso, pediu que voc\u00ea criasse um programa para avaliar se duas palavras s\u00e3o po\u00e9ticas."}, {"tests": [{"date": "2017-07-20T04:06:48.146440", "description": "Exemplo b\u00e1sico", "key": "Sey24ALWy", "input": "oi\nvoce\ncomo\nconstitucionalmente\nvai", "owner": "matheusgr@gmail.com", "output": "oi\nconstitucionalmente", "tip": "", "publish": true}, {"date": "2017-07-20T04:06:48.245690", "description": "Todas de mesmo tamanho", "key": "Rga4SVJQW", "input": "eu\nvc\ntu\nno\npo", "owner": "matheusgr@gmail.com", "output": "eu\neu", "tip": "", "publish": true}, {"date": "2017-07-20T04:06:48.314160", "description": "Menor no final", "key": "RfuFcSSUi", "input": "abcdefgh\njklmno\npqrst\nuvg\nb", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2017-07-20T04:06:48.370790", "description": "Maior no final", "key": "MDwHRRFKq", "input": "jklmno\npqrst\nuvg\nb\nabcdefgh", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}], "date": "2017-07-20T04:06:48.497150", "name": "Maior e menor palavra", "tags": [], "tip": "", "publish": true, "canceled": false, "key": "SVBLB6mH2", "owner": "matheusgr@gmail.com", "description": "Um programa passa para o usu\u00e1rio 5 palavras e pede que o usu\u00e1rio imprima a maior e a menor palavra encontrada. Em caso de existirem palavras igualmente grandes ou pequenas a primeira palavra colocada como entrada deve ser imprimida."}, {"tests": [{"date": "2017-07-20T03:55:55.338350", "description": "5 (maior) - 1 (menor) = 4", "key": "MWC9SxmAC", "input": "1\n2\n3\n4\n5", "owner": "matheusgr@gmail.com", "output": "4", "tip": "", "publish": true}, {"date": "2017-07-20T03:55:55.530740", "description": "Exemplo b\u00e1sico 2", "key": "LW5DPSe8W", "input": "10\n50\n40\n30\n20", "owner": "matheusgr@gmail.com", "tip": "menor no 1o", "publish": false}, {"date": "2017-07-20T03:55:55.599540", "description": "menor no 5o", "key": "Q3itiORWq", "input": "20\n30\n40\n50\n10", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2017-07-20T03:55:55.694030", "description": "valores iguais", "key": "MGpwU3Xg8", "input": "5\n5\n5\n5\n5", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}], "date": "2017-07-20T03:55:55.757690", "name": "Maior e Menor", "tags": [], "tip": "", "publish": true, "canceled": false, "key": "MRcS7IuiO", "owner": "matheusgr@gmail.com", "description": "Considere um programa que recebe 5 entradas. Imprima a diferen\u00e7a do maior e menor valor dessas 5 entradas."}, {"tests": [{"date": "2017-07-13T13:31:20.331930", "description": "Exemplo 1", "key": "SBjfoTNqq", "input": "animal\narisco\ndomesticado\nperde\nrisco", "owner": "matheusgr@gmail.com", "output": "s\ns\nn\nn\nn", "tip": "", "publish": true}, {"date": "2017-07-13T13:31:20.419310", "description": "Sem letra a", "key": "Ttb85F5Q8", "input": "laranja\npera\nuva\nmaca\nsalada-mista", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2017-07-13T13:31:20.545350", "description": "S\u00f3 letras A", "key": "N12BlIgUK", "input": "abacate\namora\nabobora\nabacaxi\nacerola", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2017-07-13T13:31:20.602610", "description": "primeira", "key": "U8DiM0ZcW", "input": "a\nb\nc\nd\ne", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2017-07-13T13:31:20.661920", "description": "ultima", "key": "OaDWEXA7E", "input": "e\nd\nc\nb\na", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2017-07-13T13:31:20.743990", "description": "segunda", "key": "TOpuwysZk", "input": "b\na\nc\nd\ne", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2017-07-13T13:31:20.917570", "description": "terceira", "key": "RqURfbXSi", "input": "b\nc\na\nd\ne", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2017-07-13T13:31:21.008340", "description": "quarta", "key": "LRLpOJl8C", "input": "b\nc\nd\na\ne", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}], "date": "2017-07-13T13:31:21.074050", "name": "In\u00edcio da Vogal", "tags": [""], "tip": "", "publish": true, "canceled": false, "key": "Q0SCcPwrg", "owner": "matheusgr@gmail.com", "description": "Cole\u00e7\u00f5es s\u00e3o estruturas auxiliares que permitem armazenar diferentes entidades sob um mesmo nome. Um exemplo de uma cole\u00e7\u00e3o bastante utilizada \u00e9 uma string. Uma string \u00e9 uma cole\u00e7\u00e3o de caracteres. Quando falamos da string `'aeiou'` na verdade estamos falando de uma cole\u00e7\u00e3o de cinco caracteres: `a`, `e`, `i`, `o` e `u`.\n\nEm toda cole\u00e7\u00e3o, \u00e9 poss\u00edvel ver o tamanho desta utilizando a fun\u00e7\u00e3o `len` (exemplo: `len(variavel_string)`). Tamb\u00e9m \u00e9 poss\u00edvel acessar um membro dessa cole\u00e7\u00e3o atrav\u00e9s do operador de acesso `[]`. Como exemplo, para pegar o primeiro caractere de uma string, ou seja, o primeiro elemento, fazemos: `minha_string[0]`. O zero indica a primeira posi\u00e7\u00e3o de uma string. Este n\u00famero da posi\u00e7\u00e3o \u00e9 chamado tamb\u00e9m de \u00edndice do elemento da cole\u00e7\u00e3o.\n\nSe o valor de uma vari\u00e1vel `entrada` for `aeiou`, `entrada[0]` retornar\u00e1 `a`. `entrada[1]` retornar\u00e1 `e` e assim sucessivamente.\n\nFa\u00e7a um programa que, dada 5 palavras como entrada, diga se as palavras come\u00e7am com o caractere `a`. Veja os exemplos."}, {"tests": [{"date": "2017-05-12T02:33:47.091960", "description": "Soma", "key": "QSXtc5Qzw", "input": "+\n2.0\n3.5", "owner": "matheusgr@gmail.com", "output": "RESULTADO: 5.5", "tip": "", "publish": true}, {"date": "2017-05-12T02:33:47.158140", "description": "Divis\u00e3o", "key": "QhePx2Tlg", "input": "/\n5.0\n0.0", "owner": "matheusgr@gmail.com", "output": "ERRO", "tip": "", "publish": true}, {"date": "2017-05-12T02:33:47.247160", "description": "Soma 2", "key": "SRcpDVfOK", "input": "+\n5.9\n5.1", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2017-05-12T02:33:47.302100", "description": "Multiplica\u00e7\u00e3o", "key": "Tk5Nb5x2G", "input": "*\n2.0\n2.5", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2017-05-12T02:33:47.389240", "description": "Divis\u00e3o", "key": "M9gWsu6Hg", "input": "/\n5.0\n2.5", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2017-05-12T02:33:47.447070", "description": "Divis\u00e3o por zero", "key": "P7bxAyLy4", "input": "/\n0.0\n0.0", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2017-05-12T02:33:47.513750", "description": "Entrada invalida", "key": "Ldb5gMCeG", "input": "0", "owner": "matheusgr@gmail.com", "output": "ENTRADA INVALIDA", "tip": "", "publish": true}, {"date": "2017-05-12T02:33:47.579230", "description": "Entrada invalida", "key": "TzK9p3gzQ", "input": "%", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2017-05-12T02:33:47.634080", "description": "Subtra\u00e7\u00e3o", "key": "U9aHbphHU", "input": "-\n3.0\n2.5", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}], "date": "2017-05-12T02:33:47.693920", "name": "Calculadora com Op\u00e7\u00e3o", "tags": [""], "tip": "", "publish": true, "canceled": false, "key": "R7qL9alKS", "owner": "matheusgr@gmail.com", "description": "Construa um programa de calculadora onde o usu\u00e1rio ir\u00e1 escolher uma das 4 opera\u00e7\u00f5es b\u00e1sicas abaixo como a\u00e7\u00e3o do usu\u00e1rio.  Caso o usu\u00e1rio digite um dos s\u00edmbolos: `+-*\\` o programa deve consumir duas entradas seguintes. Se o usu\u00e1rio digitar qualquer outra entrada, deve apenas exibir: `ENTRADA INVALIDA` e terminar o programa.\n\nAp\u00f3s consumir as duas entradas, o programa deve exibir o resultado da opera\u00e7\u00e3o com a mensagem: `RESULTADO: X` onde `X` \u00e9 o resultado da opera\u00e7\u00e3o sobre as duas entradas de valores. Isto ser\u00e1 exibido em todas as situa\u00e7\u00f5es, exceto quando o segundo valor de entrada for `0` e a opera\u00e7\u00e3o for de divis\u00e3o ou resto. Neste caso, \u00e9 exibida a mensagem \"ERRO\".\n\nVeja os exemplos abaixo."}, {"tests": [{"date": "2017-05-12T02:32:36.352040", "description": "Passou", "key": "OzsBSL0wy", "input": "8.0\n9.0", "owner": "matheusgr@gmail.com", "output": "pass: True!", "tip": "", "publish": true}, {"date": "2017-05-12T02:32:36.424770", "description": "N\u00e3o passou :(", "key": "Sw0ReDPWa", "input": "5.0\n6.0", "owner": "matheusgr@gmail.com", "output": "pass: False!", "tip": "", "publish": true}, {"date": "2017-05-12T02:32:36.492960", "description": "N\u00e3o passou, limite", "key": "TiCS6iGPo", "input": "7.0\n6.9", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2017-05-12T02:32:36.583700", "description": "Passou limite", "key": "UkSDd8BY8", "input": "6.9\n7.1", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2017-05-12T02:32:36.655410", "description": "Passou limite 2", "key": "LuL7Q9GfQ", "input": "7.1\n6.9", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2017-05-12T02:32:36.721290", "description": "Passou false", "key": "Om38no2BE", "input": "6.9\n7.0", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}], "date": "2017-05-12T02:32:36.817470", "name": "Passou com m\u00e9dia 7!", "tags": [""], "tip": "", "publish": true, "canceled": false, "key": "QN9tFkXbc", "owner": "matheusgr@gmail.com", "description": "Os valores `True` e `False` podem ser convertidos para strings e usados em mensagens como qualquer outro valor.\n\nFa\u00e7a um programa que receba 2 notas e calcula a m\u00e9dia. Caso o aluno tenha sido aprovado (a m\u00e9dia for pelo menos 7), exiba a mensagem: \"pass: True!\", caso contr\u00e1rio, imprima a mensagem: \"pass: False!\"."}, {"tests": [{"date": "2016-04-18T20:58:15.118940", "description": "", "key": "MNmFLfCXg", "input": "pedro 1000\narthur 550\nana 920\njorge 700\n-", "owner": "matheusgr@gmail.com", "output": "maior: 1000\nmenor: 550\nmedia: 792\nacima: 3\nabaixo: 1\n", "tip": "", "publish": true}, {"date": "2016-04-18T20:58:15.179550", "description": "", "key": "ScxYtefi4", "input": "a 0\n-", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-04-18T20:58:15.275430", "description": "", "key": "Sidh1MKGG", "input": "b 1000\n-", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-04-18T20:58:15.397810", "description": "", "key": "Lynx6JOSm", "input": "a 1\nb 2\nc 4\n-", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-04-18T20:58:15.516130", "description": "", "key": "Og35HGim0", "input": "a 4\nb 2\nc 1\n-", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}], "date": "2016-04-18T20:58:15.567010", "name": "Resultados de Prova", "tags": [""], "tip": "", "publish": true, "canceled": false, "key": "NIGzVIuci", "owner": "matheusgr@gmail.com", "description": "Um professor gerou uma lista com os alunos e as notas das provas (0 a 1000) desses alunos.\n\nEle deseja saber informa\u00e7\u00f5es gerais sobre a prova e pede que voc\u00ea calcule: maior nota, menor nota, m\u00e9dia, n\u00famero de alunos com nota acima ou igual a 700, n\u00famero de alunos com nota abaixo de 700. O programa para ao ler uma linha com um tra\u00e7o (`-`).\n\nVeja o exemplo abaixo para entender como deve ficar a sa\u00edda do seu programa. Imprima sempre a m\u00e9dia truncada."}, {"tests": [{"date": "2016-04-18T20:45:36.898420", "description": "PEDRO, JORGE = 5 letras", "key": "SQRZnBFNQ", "input": "diego thiago arthur pedro abdias\nisaac matheus jorge joao nestor\navelange ezequiel thor epaminondas\nwally", "owner": "matheusgr@gmail.com", "output": "pedro\njorge\n?", "tip": "", "publish": true}, {"date": "2016-04-18T20:45:36.999390", "description": "1 palavra", "key": "RFu8M13wG", "input": "ana\npedro\njorge\nwally", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-04-18T20:45:37.075700", "description": "no come\u00e7o", "key": "SXVTb1I3M", "input": "aeiou abcdef abcdefg abcdefh\nuoiea abcdefjjj abcdefa ab\naaaaaaaaaaa aaaaaaaaaaa aaaaaaaaaaa\nwally", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-04-18T20:45:37.125960", "description": "no final", "key": "SqTs3sBWK", "input": "aaaaaaaaaaa aaaaaaaaaaa aaaaaaaaaaa\naeiou abcdef abcdefg abcdefh\nuoiea abcdefjjj abcdefa ab\nwally", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}], "date": "2016-04-18T20:45:37.222670", "name": "Onde est\u00e1 wally?", "tags": [""], "tip": "", "publish": true, "canceled": false, "key": "SlfR6pBmC", "owner": "matheusgr@gmail.com", "description": "Wally mudou de nome. Felizmente, para a interpol, ele adotou um novo nome qualquer de 5 letras.\n\nPara ajudar a desmascarar Wally, fa\u00e7a um programa que leia listas contendo nomes de pessoas. E imprima o \u00faltimo nome que pode ser o novo nome de Wally. Se n\u00e3o existir nenhum nome poss\u00edvel, imprima apenas o caractere `?`.\n\nO programa termina quando encontrar uma linha com a palavra wally. Veja o exemplo."}, {"tests": [{"date": "2016-04-18T20:08:33.376400", "description": "Aproxima\u00e7\u00e3o inicial: 500. aproxima\u00e7\u00f5es seguintes: 400, 500 (perigo, 500 > 400), 450, 200, 100, 150 (perigo, 150 > 100), 50, 0", "key": "NK15nbOwC", "input": "7000\n6500\n6600\n7500\n6550\n6800\n7100\n7150\n6950\n7000", "owner": "matheusgr@gmail.com", "output": "ADEQUADO\nPERIGO\nADEQUADO\nADEQUADO\nADEQUADO\nPERIGO\nADEQUADO\nOK", "tip": "", "publish": true}, {"date": "2016-04-18T20:08:33.532050", "description": "Limites", "key": "Nct0qFBcO", "input": "1000\n900\n900\n1100\n1000", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-04-18T20:08:33.641320", "description": "Limites 2", "key": "NRCbmsio4", "input": "1000\n900\n1100\n900\n1000", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-04-18T20:08:33.804110", "description": "De baixo pra cima", "key": "MUSJwhYR6", "input": "500\n100\n201\n302\n403\n500", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-04-18T20:08:33.904500", "description": "De cima pra baixo", "key": "RKgBd6q3M", "input": "500\n900\n799\n698\n597\n500", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-04-18T20:08:33.993940", "description": "Alternando", "key": "SpPs2X3SK", "input": "1000\n100\n1899\n201\n1798\n200\n1000", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}], "date": "2016-04-18T20:08:34.076220", "name": "Estabilizando a Altura do Avi\u00e3o", "tags": [""], "tip": "", "publish": true, "canceled": false, "key": "Q36VouKXo", "owner": "matheusgr@gmail.com", "description": "Durante o v\u00f4o, uma aeronave deve ficar na altura indicada em seu plano de v\u00f4o. O sistema da nave, ao receber o plano de v\u00f4o, pode indicar ao piloto se a aproxima\u00e7\u00e3o que ele faz para chegar \u00e0 altura indicada \u00e9 adequada ou n\u00e3o. Uma aproxima\u00e7\u00e3o \u00e9 considerada adequada, se a cada aproxima\u00e7\u00e3o feita, voc\u00ea estiver mais pr\u00f3ximo da altura ideal do que estava anteriormente.\n\nPor exemplo, se a altura desejada for de 7500 p\u00e9s e a altura atual for de 7000 p\u00e9s, isto representa uma diferen\u00e7a de 500 p\u00e9s para a altura ideal. Se o piloto voar para uma altura entre 7001 e 7599 p\u00e9s, esta aproxima\u00e7\u00e3o \u00e9 adequada. Se o piloto sai de 7000 p\u00e9s e vai para 7400 p\u00e9s, ele passa a estar 100 p\u00e9s da altura ideal. Assim, dessa posi\u00e7\u00e3o, ele s\u00f3 pode ir para uma altura entre 7401 p\u00e9s e 7599 p\u00e9s para continuar em uma altura adequada.\n\nSabendo que a nave calcula se aproxima\u00e7\u00e3o \u00e9 adequada levando em considera\u00e7\u00e3o apenas a \u00faltima medi\u00e7\u00e3o de altura, fa\u00e7a um programa que receba as diferentes alturas medidas durante esta aproxima\u00e7\u00e3o, e imprima se cada altura \u00e9 adequada (ADEQUADO), ou n\u00e3o (PERIGO). O programa deve parar ao atingir a altura ideal (OK). Considere que o programa recebe a altura ideal e a primeira medi\u00e7\u00e3o de altura como entradas iniciais, seguido pelas demais medi\u00e7\u00f5es, todas em inteiros. Veja o exemplo."}, {"tests": [{"date": "2016-04-18T18:48:29.358180", "description": "Teste B\u00e1sico", "key": "NbxKxKVRg", "input": "12\n14\n9\n11\n13\n12", "owner": "matheusgr@gmail.com", "output": "MAIOR\nMENOR\nMENOR\nMAIOR\nACERTOU", "tip": "", "publish": true}, {"date": "2016-04-18T18:48:29.474110", "description": "Acertou de primeira", "key": "NlGsbCtEG", "input": "10\n10", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-04-18T18:48:29.778630", "description": "diferentes pot\u00eancias", "key": "NhUBkxUWW", "input": "20\n10\n100\n100\n10\n20", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-04-18T18:48:30.001620", "description": "s\u00f3 menores", "key": "NU8Bn86xk", "input": "101\n1\n10\n100\n101", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-04-18T18:48:30.127330", "description": "s\u00f3 maiores", "key": "NCin37Kr2", "input": "1\n1000\n100\n10\n1", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}], "date": "2016-04-18T18:48:30.408070", "name": "Jogo de adivinha\u00e7\u00e3o", "tags": [""], "tip": "", "publish": true, "canceled": false, "key": "PmZq7rg1I", "owner": "matheusgr@gmail.com", "description": "Um dos jogos mais simples que existem, \u00e9 o jogo de adivinha\u00e7\u00e3o. Uma pessoa escolhe um n\u00famero aleat\u00f3rio, enquanto outra pessoa tenta descobrir qual foi o n\u00famero escolhido.\n\nPor exemplo, eu posso imaginar o n\u00famero 17 enquanto voc\u00ea tenta adivinhar qual foi o n\u00famero que eu escolhi. A cada tentativa eu devo dizer se o n\u00famero que voc\u00ea tentou \u00e9 maior, menor ou se \u00e9 o n\u00famero que eu pensei.\n\nPor exemplo, voc\u00ea pode tentar adivinhar dizendo o n\u00famero 10, na qual eu vou dizer que \u00e9 menor que meu n\u00famero escolhido. Em seguida voc\u00ea pode falar o n\u00famero 20, que \u00e9 maior que meu n\u00famero escolhido.\n\nImplemente esse jogo, de forma que ele receba o n\u00famero que estou pensado, seguido das suas tentativas de adivinha\u00e7\u00e3o. O programa deve parar quando voc\u00ea acertar o n\u00famero escolhido. A cada intera\u00e7\u00e3o, seu programa deve imprimir MAIOR, MENOR, ou ACERTOU indicando se o n\u00famero que voc\u00ea falou \u00e9, respectivamente, maior, menor ou igual, ao n\u00famero que eu escolhi. Veja o exemplo."}, {"tests": [{"date": "2016-04-13T13:49:43.707950", "description": "teste b\u00e1sico", "key": "NXI2pWflA", "input": "love\nby\nmy\ntest\nis\ndry", "owner": "matheusgr@gmail.com", "output": "by\nmy\ndry", "tip": "", "publish": true}, {"date": "2016-04-13T13:49:43.816940", "description": "", "key": "MUzBgAMIS", "input": "i\nfly\ni\ncry\ni\npry", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-04-13T13:49:43.871280", "description": "", "key": "NVaU1lNx2", "input": "gym\nshy\nsky", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-04-13T13:49:43.980460", "description": "no fim", "key": "NoP06T8sK", "input": "algo\ngym\nnth\nmmm", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}], "date": "2016-04-13T13:49:44.050340", "name": "Palavras ingratas", "tags": [""], "tip": "", "publish": true, "canceled": false, "key": "PzzmAS81Y", "owner": "matheusgr@gmail.com", "description": "Para estudar como as palavra s\u00e3o compostas, um pesquisador criou a defini\u00e7\u00e3o de uma palavra ingrata. Uma palavra ingrata n\u00e3o tem vogais.\n\nEste pesquisador deseja extrair de diferentes textos pelo menos 3 palavras ingratas. Fa\u00e7a um programa que receba diferentes palavras como entrada. Seu programa deve parar ao encontrar 3 palavras ingratas, imprimindo tais palavras em ordem. Veja o exemplo abaixo."}, {"tests": [{"date": "2016-04-13T13:37:03.531800", "description": "2 valores negativos", "key": "Q7BrSnx0y", "input": "18\n23\n-24\n20\n17\n-19\n25\n0", "owner": "matheusgr@gmail.com", "output": "2", "tip": "", "publish": true}, {"date": "2016-04-13T13:37:03.720450", "description": "valores nas pontas", "key": "NEofX0PD6", "input": "-10\n2\n3\n4\n5\n-20\n0", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-04-13T13:37:03.832600", "description": "sem valores negativos", "key": "NGnlFgjLs", "input": "1\n2\n3\n4\n5\n6\n0", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-04-13T13:37:03.958610", "description": "apenas valores negativos", "key": "Q3dJ9sDXE", "input": "-23\n-23\n-25\n-30\n-21\n0", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}], "date": "2016-04-13T13:37:04.082340", "name": "Filtro de Temperatura", "tags": [""], "tip": "", "publish": true, "canceled": false, "key": "PzOA6f22a", "owner": "matheusgr@gmail.com", "description": "Uma casa inteligente apresentava diferentes sensores de temperatura, sendo um destes sensores defeituoso. Neste sensor, as temperaturas aparecem com valor negativo, o que n\u00e3o acontece no local aonde a casa fica.\n\nConsiderando que todos os sensores enviam seus dados para um sistema central de armazenagem de registros, fa\u00e7a um programa que processe esse registro indicando o n\u00famero de medi\u00e7\u00f5es com falhas (ou seja, com valores negativos). Esse registro do sistema termina com o valor 0. Veja o exemplo."}, {"tests": [{"date": "2016-04-13T13:22:30.502080", "description": "5 pessoas, m\u00e9dia 3", "key": "NmuiDXWsa", "input": "pedro 1\nana 3\njoao 4\nisabel 2\nmatheus 5\nfim", "owner": "matheusgr@gmail.com", "output": "5\n3", "tip": "", "publish": true}, {"date": "2016-04-13T13:22:30.612290", "description": "2 pessoas m\u00e9dia exata 3", "key": "QEqg6rjmq", "input": "pedro 1\nana 5\nfim", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-04-13T13:22:30.680900", "description": "3 pessoas m\u00e9dia arredondada pra baixo", "key": "NEsOZLtCq", "input": "pedro 1\nisaque 2\nana 1\nfim", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-04-13T13:22:30.771750", "description": "tres pessoas arredondado pra baixo valor alto", "key": "Nq9CPBLqS", "input": "ana 1\njoao 3\npedro 1\nfim", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}], "date": "2016-04-13T13:22:30.898440", "name": "Abaixo-assinado", "tags": [""], "tip": "", "publish": true, "canceled": false, "key": "Q795uH0vQ", "owner": "matheusgr@gmail.com", "description": "Para tentar pressionar a prefeitura para construir um parque no bairro, foi feito um abaixo-assinado. Cada pessoa deve assinar o nome e escolher um valor entre 1 a 5 da import\u00e2ncia do parque. Por exemplo, se Isabelly acha o parque muito importante, ela deve assinar \"Isabelly 5\". Cada pessoa assina unicamente uma vez.\n\nFa\u00e7a um programa que recebe v\u00e1rias assinaturas e notas das pessoas interessadas na constru\u00e7\u00e3o do parque. Considere que cada pessoa s\u00f3 assina o primeiro nome. O programa encerra ao encontrar a palavra \"fim\" e deve imprimir a quantidade de pessoas que assinaram a lista e a m\u00e9dia do interesse das pessoas (apenas valor inteiro). Veja o exemplo de entrada e sa\u00edda."}, {"tests": [{"date": "2016-04-13T12:56:21.052130", "description": "2 + 6 + 4 = 12", "key": "NM7hzTbwO", "input": "1\n2\n3\n6\n9\n4\n-1", "owner": "matheusgr@gmail.com", "output": "12", "tip": "", "publish": true}, {"date": "2016-04-13T12:56:21.131430", "description": "No come\u00e7o e fim", "key": "QPmUpBkFE", "input": "2\n1\n3\n5\n9\n12\n-1", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-04-13T12:56:21.268690", "description": "No meio", "key": "Q9WjN4rCK", "input": "1\n3\n111\n121\n20\n21\n13\n15\n-1", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}], "date": "2016-04-13T12:56:21.422550", "name": "Comando de Repeti\u00e7\u00f5es por Condi\u00e7\u00e3o", "tags": [""], "tip": "", "publish": true, "canceled": false, "key": "MPECmTCTo", "owner": "matheusgr@gmail.com", "description": "Existem dois tipos de comando de repeti\u00e7\u00e3o em python, um atrav\u00e9s de intera\u00e7\u00e3o em sequ\u00eancias (`for`) e outro comando definido por condi\u00e7\u00f5es (`while`).\n\nO comando `while` (termo em ingl\u00eas da palavra \"enquanto\") define que o bloco de comando que o segue ser\u00e1 executado enquanto uma condi\u00e7\u00e3o for verdadeira. Veja o exemplo:\n\n```\nteste = 10\nwhile teste > 0:\n    print(teste)\n    teste -= 1\nprint(\"fim\")\n```\n\nO programa acima ir\u00e1 imprimir os n\u00fameros de 10 at\u00e9 1. No momento que a vari\u00e1vel `teste` assumir o valor `0`, a condi\u00e7\u00e3o `teste > 0` se torna falsa, e assim o bloco que segue o `while` n\u00e3o \u00e9 mais executado. Por fim, o programa imprime a palavra \"fim\" e termina sua execu\u00e7\u00e3o.\n\nNote que o programa acima \u00e9 equivalente ao seguinte programa abaixo:\n\n```\nfor teste in range(10, 0, -1):\n    print(teste)\nprint(\"fim\")\n```\n\nObserve que o segundo programa \u00e9 mais simples e direto. Isso acontece porque o comando `for` foi feito para realizar repeti\u00e7\u00f5es considerando sequ\u00eancias bem conhecidas, como listas e strings. O comando de repeti\u00e7\u00e3o `while` \u00e9 especialmente adequado para ser usado quando n\u00e3o se conhece a quantidade de repeti\u00e7\u00f5es a serem realizadas.\n\nPor exemplo, veja um programa que recebe valores inteiros at\u00e9 encontrar a entrada 0. Por fim o programa imprime a soma dos valores lidos.\n\n```\nsoma = 0\nentrada = int(input())\nwhile entrada != 0:\n    entrada = int(input())\n    soma += entrada\nprint(soma)\n```\n\nPara testar seus conhecimentos no uso desse novo comando, fa\u00e7a um programa que receba valores inteiros at\u00e9 encontrar o valor -1. O programa deve imprimir a soma dos valores pares lidos. Veja o exemplo de entrada e sa\u00edda abaixo."}, {"tests": [{"date": "2016-04-11T13:54:31.057780", "description": "Com vogais: CAS[A] LEIT[E] CA[I] TE[U]", "key": "NGH2bO5YW", "input": "casa\nleite\namor\ncai\nteu\n", "owner": "matheusgr@gmail.com", "output": "aeiu", "tip": "", "publish": true}, {"date": "2016-04-11T13:54:31.130590", "description": "todas", "key": "NV5rlacd6", "input": "ba\ncbe\nddbi\nfffbo\nggggbu", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-04-11T13:54:31.189900", "description": "no come\u00e7o, mas s\u00f3 uma no fim", "key": "QPLChCbK4", "input": "aeioub\neiouac\niouaeod\nuaeirof\noaieoua", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-04-11T13:54:31.319170", "description": "no come\u00e7o, mas s\u00f3 uma no fim", "key": "Q3qDDiK1Y", "input": "oeioua\neiouac\niouaeod\nuaeirof\noaieoub", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-04-11T13:54:31.421760", "description": "limites", "key": "QBrrXaxOq", "input": "aeiou\nbbbb\ncccc\ndddd\naeiou", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-04-11T13:54:31.539590", "description": "inverso", "key": "Ne00vMTqK", "input": "aeiou\naoeoraoro\namrkaoemri\nerkjlajre\nakljlajraa", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}], "date": "2016-04-11T13:54:31.630180", "name": "\u00daltima vogal", "tags": [""], "tip": "", "publish": true, "canceled": false, "key": "Q4wuqKxnM", "owner": "matheusgr@gmail.com", "description": "Fa\u00e7a um programa que receba 5 palavras e imprima na sa\u00edda a \u00faltima letra de cada palavra, quando esta for vogal, em uma \u00fanica linha. Considere que sempre haver\u00e1 pelo menos uma palavra com uma vogal no final. Veja os exemplos de entrada e sa\u00edda:"}, {"tests": [{"date": "2016-04-11T13:47:16.201100", "description": "M\u00e9dia = 3", "key": "NJUfbnPay", "input": "5 2 4 3 1", "owner": "matheusgr@gmail.com", "output": "5 4", "tip": "", "publish": true}, {"date": "2016-04-11T13:47:16.288640", "description": "M\u00e9dia = 30", "key": "QFbOwjhYW", "input": "10 20 30 40 50", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-04-11T13:47:16.367450", "description": "M\u00e9dia = 300", "key": "NQr60cUwi", "input": "500 400 300 200 100", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-04-11T13:47:16.489370", "description": "2 elementos", "key": "QFzgimLzc", "input": "10 20", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-04-11T13:47:16.604880", "description": "2 elementos", "key": "Ses6k5dWi", "input": "200 10", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}], "date": "2016-04-11T13:47:16.696130", "name": "Maior que a m\u00e9dia", "tags": [""], "tip": "", "publish": true, "canceled": false, "key": "PoFnkEzvk", "owner": "matheusgr@gmail.com", "description": "Para avaliar uma popula\u00e7\u00e3o de dados \u00e9 comum olhar o comportamento e caracter\u00edsticas de elementos que est\u00e3o acima (ou abaixo) da m\u00e9dia.\n\nFa\u00e7a um programa que receba, em uma linha, uma lista de inteiros e que imprima, na sa\u00edda, apenas os valores que est\u00e3o acima da m\u00e9dia.\n\nSeu programa deve imprimir os resultados em uma \u00fanica linha e na mesma ordem que foram inseridos. Valores iguais a m\u00e9dia n\u00e3o devem ser impressos e considere que para toda entrada, haver\u00e1 pelo menos um valor na sa\u00edda. Veja o exemplo."}, {"tests": [{"date": "2016-04-06T14:34:07.353150", "description": "", "key": "M6uqMvZtA", "input": "10 30 20 10 10 20 30\n15 10 20 15 10 20 42\n21 10 10 5 20 50 20\n17 19 20 30 10 8 4", "owner": "matheusgr@gmail.com", "output": "130 10 30\n132 10 42\n136 5 50\n108 4 30", "tip": "", "publish": true}, {"date": "2016-04-06T14:34:07.439730", "description": "", "key": "RYn7TDlpY", "input": "1 2 3 4 5 6 7\n1 2 3 4 5 6 7\n1 2 3 4 5 6 7\n1 2 3 4 5 6 7", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-04-06T14:34:07.522890", "description": "", "key": "SsODkOXrc", "input": "7 6 5 4 3 2 1\n7 6 5 4 3 2 1\n7 6 5 4 3 2 1\n7 6 5 4 3 2 1", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-04-06T14:34:07.656290", "description": "", "key": "SrTMYIZrE", "input": "5 5 5 5 5 5 5\n5 5 5 5 5 5 5\n5 5 5 5 5 5 5\n5 5 5 5 5 5 5", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-04-06T14:34:07.716170", "description": "", "key": "SuSrko3U0", "input": "6 5 4 3 2 1 7\n6 5 4 3 2 1 7\n6 5 4 3 2 1 7\n6 5 4 3 2 1 7", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-04-06T14:34:07.820930", "description": "", "key": "NTDn1BwRs", "input": "7 1 2 3 4 5 6\n7 1 2 3 4 5 6\n7 1 2 3 4 5 6\n7 1 2 3 4 5 6", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}], "date": "2016-04-06T14:34:07.880080", "name": "Gastos de 4 semanas", "tags": [""], "tip": "", "publish": true, "canceled": false, "key": "ShTvy2kb2", "owner": "matheusgr@gmail.com", "description": "Peter controla seus gastos semanais num arquivo de textos. Toda linha representa uma semana e toda linha tem 7 valores inteiros (1 pra cada dia da semana). Exemplo para 4 semanas de gastos:\n```\n10 30 20 10 10 20 30\n15 10 20 15 10 20 42\n21 10 10 5 20 50 20\n17 19 20 30 10 8 4\n```\n\nPeter quer fazer uma avalia\u00e7\u00e3o dos seus gastos a cada 4 semanas. Fa\u00e7a um programa que receba 4 linhas, representando 4 semanas de gastos, e indique pra cada semana: o total gasto, o maior gasto e o menor gasto. Veja o exemplo."}, {"tests": [{"date": "2016-04-06T14:34:02.114220", "description": "maiores gastos: 30 e 40", "key": "SmdloRGZU", "input": "10 20 5 30 40 25 3 8", "owner": "matheusgr@gmail.com", "output": "70", "tip": "", "publish": true}, {"date": "2016-04-06T14:34:02.219920", "description": "maiores gastos: 50 e 50", "key": "Skn0NGYU4", "input": "50 10 20 30 40 50", "owner": "matheusgr@gmail.com", "output": "100", "tip": "", "publish": true}, {"date": "2016-04-06T14:34:02.311030", "description": "", "key": "MQrTNtfKi", "input": "10 20 30 40 50 60 70 80 90 100", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-04-06T14:34:02.423430", "description": "", "key": "Q34q5wHc8", "input": "100 90 80 70 60 50 40 30 20 1000 999", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-04-06T14:34:02.561540", "description": "no come\u00e7o", "key": "SYCV9Xjm4", "input": "1000 999 10 20 30 40 50 60 70 80 120 230 302", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-04-06T14:34:02.658290", "description": "", "key": "MPQzDymWm", "input": "999 1000 10 20 30 40 50 60 70 80 120 230 302", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}], "date": "2016-04-06T14:34:02.761530", "name": "Dois maiores gastos da empresa", "tags": [""], "tip": "", "publish": true, "canceled": false, "key": "MP51Jj5V2", "owner": "matheusgr@gmail.com", "description": "Uma empresa quer organizar seus gastos e para isso tenta identificar os dois maiores gastos da empresa.\n\nFa\u00e7a um programa que receba uma linha de inteiros, representando os gastos de uma empresa, e produza, como sa\u00edda, a soma dos dois maiores gastos da empresa.\n\nVeja o exemplo."}, {"tests": [{"date": "2016-04-06T14:33:56.783540", "description": "Termo inicial: 10, raz\u00e3o: 3, total de termos: 5", "key": "M0f2Ae4Iq", "input": "10 3 5", "owner": "matheusgr@gmail.com", "output": "10 13 16 19 22", "tip": "", "publish": true}, {"date": "2016-04-06T14:33:56.865680", "description": "", "key": "QCFSyZEvI", "input": "0 5 10", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-04-06T14:33:56.974890", "description": "", "key": "MVRsyi1o0", "input": "1 100 1", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}], "date": "2016-04-06T14:33:57.059640", "name": "Termos de uma progress\u00e3o aritim\u00e9tica", "tags": [""], "tip": "", "publish": true, "canceled": false, "key": "QAW7i0MiW", "owner": "matheusgr@gmail.com", "description": "Existem diferentes sequ\u00eancias no mundo da matem\u00e1tica. Uma dessas sequ\u00eancias \u00e9 a progress\u00e3o aritim\u00e9tica onde cada termo \u00e9 definido pela soma do termo anterior mais uma raz\u00e3o. Por exemplo, na progress\u00e3o aritim\u00e9tica de termo inicial 0, raz\u00e3o 5, os primeiros termos desta sequ\u00eancia s\u00e3o: `0 5 10 15 20 25 30...`.\n\nFa\u00e7a um programa que receba como entrada uma linha contendo o termo inicial, a raz\u00e3o e o n\u00famero de termos a ser impresso.\n\nO programa deve imprimir a sequ\u00eancia como sa\u00edda em uma \u00fanica linha. Veja o exemplo."}, {"tests": [{"date": "2016-04-06T14:33:50.637090", "description": "", "key": "NX4vI1UKu", "input": "mar ago set jan fev out nov abr mai jul jun dez\n120 230 299 151 231 192 123 421 840 129 423 299\nfev", "owner": "matheusgr@gmail.com", "output": "231", "tip": "", "publish": true}, {"date": "2016-04-06T14:33:50.731020", "description": "come\u00e7o", "key": "SlENmFbFY", "input": "dez nov out set ago jul jun mai abr mar fev jan\n10 20 30 40 50 60 70 80 90 100 110 120\ndez", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-04-06T14:33:50.815990", "description": "fim", "key": "SYmKbS5CK", "input": "dez nov out set ago jul jun mai abr mar fev jan\n10 20 30 40 50 60 70 80 90 100 110 120\njan", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-04-06T14:33:50.872790", "description": "meio", "key": "NkklbJN9U", "input": "dez nov out set ago jul jun mai abr mar fev jan\n10 20 30 40 50 60 70 80 90 100 110 120\njun", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}], "date": "2016-04-06T14:33:50.988450", "name": "Consultando os gastos mensais", "tags": [""], "tip": "", "publish": true, "canceled": false, "key": "QIXAfeChM", "owner": "matheusgr@gmail.com", "description": "Uma empresa, ao realizar a contabilidade dos gastos dos seus anos de atividade, encontrou um problema na organiza\u00e7\u00e3o da sua base de dados. Os meses n\u00e3o seguiam uma ordem tradicional!\n\nPor exemplo, era poss\u00edvel encontrar informa\u00e7\u00f5es como:\n\n```\nmar ago set jan fev out nov abr mai jul jun dez\n120 230 299 151 231 192 123 421 840 129 423 299\n```\n\nFa\u00e7a um programa que receba essas duas linhas de entrada de um determinado ano e uma terceira linha indicando um m\u00eas a ser consultado. Fa\u00e7a um programa que imprima o valor do gasto naquele m\u00eas. Veja o exemplo."}, {"tests": [{"date": "2016-04-04T14:26:03.375670", "description": "B\u00e1sico", "key": "RLz0Wq0G0", "input": "EXEMPLO", "owner": "matheusgr@gmail.com", "output": "E", "tip": "", "publish": true}, {"date": "2016-04-04T14:26:03.435190", "description": "IOUEA", "key": "RVb0xXAUi", "input": "IOUEA", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-04-04T14:26:03.527300", "description": "IOUE", "key": "OVcKewcTo", "input": "IOUE", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-04-04T14:26:03.638510", "description": "IOU", "key": "OVqKGBHns", "input": "IOU", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-04-04T14:26:03.736240", "description": "IO", "key": "Srt5OyszY", "input": "IO", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-04-04T14:26:03.827460", "description": "I", "key": "SgBNloGtk", "input": "I", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-04-04T14:26:04.011860", "description": "AEUOI", "key": "SpOWg8n5c", "input": "AEUOI", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-04-04T14:26:04.104570", "description": "EUOI", "key": "RhBPJ0eKu", "input": "EUOI", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-04-04T14:26:04.179160", "description": "UOI", "key": "R9UPHAd3A", "input": "UOI", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-04-04T14:26:04.277590", "description": "OI", "key": "MADS3pFxY", "input": "OI", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-04-04T14:26:04.373580", "description": "Exemplo qualquer", "key": "NYQsA1fSy", "input": "PORTEIRO", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}], "date": "2016-04-04T14:26:04.463820", "name": "Vogal XPLOTS", "tags": [""], "tip": "", "publish": true, "canceled": false, "key": "LvzHBQwdc", "owner": "matheusgr@gmail.com", "description": "Pedro criou o conceito de vogal XPLOTS. Uma vogal XPLOTS \u00e9 uma vogal da palavra que a representa. Para escolher qua vogal de uma palavra \u00e9 a mais representativa, pedro criou uma escala: I, O, U, E, A, onde `I` tem o menor valor e `A` tem o maior valor. Se uma palavra tem apenas uma vogal, esta vogal \u00e9 a vogal XPLOTS. Se a palavra tiver mais de uma vogal, a vogal escolhida \u00e9 aquela de maior valor na escala. Por exemplo, na palavra  `EXEMPLO`, a vogal XPLOTS \u00e9 a vogal `E`, pois essa tem maior valor que o `O`. Na palavra `PIA`, a vogal XPLOTS \u00e9 a vogal `A`. Na palavra `RIOS`, a vogal XPLOTS \u00e9 a vogal `O`.\n\nFa\u00e7a um programa que receba uma palavra e indique a vogal XPLOTS. Considere que todas as palavras ter\u00e3o pelo menos uma vogal e estar\u00e3o mai\u00fasculas e sem acento. Veja o exemplo de entrada e sa\u00edda abaixo."}, {"tests": [{"date": "2016-04-04T14:10:23.751910", "description": "Letra E", "key": "RExRlSEHw", "input": "e\nexemplo", "owner": "matheusgr@gmail.com", "output": "2", "tip": "", "publish": true}, {"date": "2016-04-04T14:10:23.876070", "description": "Letra X ausente", "key": "SwqExMhjk", "input": "x\nshow do chuchu", "owner": "matheusgr@gmail.com", "output": "-1", "tip": "", "publish": true}, {"date": "2016-04-04T14:10:23.989560", "description": "ultima posi\u00e7\u00e3o", "key": "LP34g88Jc", "input": "p\ncepap", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-04-04T14:10:24.231590", "description": "primeira posi\u00e7\u00e3o", "key": "ROfxEHJ68", "input": "a\namor", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-04-04T14:10:24.342380", "description": "primeira e \u00faltima", "key": "MVrm5DoIq", "input": "x\nxanaax", "owner": "matheusgr@gmail.com", "tip": "x", "publish": false}], "date": "2016-04-04T14:10:24.458310", "name": "Posi\u00e7\u00e3o na palavra", "tags": [""], "tip": "", "publish": true, "canceled": false, "key": "MExr4mclc", "owner": "matheusgr@gmail.com", "description": "Fa\u00e7a um programa que receba uma letra e uma frase indique a \u00faltima posi\u00e7\u00e3o da letra nessa frase ou -1 caso a letra n\u00e3o esteja na frase. Por exemplo, em `casa`, a \u00faltima ocorr\u00eancia da letra `a` est\u00e1 na posi\u00e7\u00e3o 3. Veja outros exemplos abaixo."}, {"tests": [{"date": "2016-04-04T13:34:28.368950", "description": "Letra A", "key": "SWsyIpOs4", "input": "a\ncada palavra daqui apresenta a letra a", "owner": "matheusgr@gmail.com", "output": "11", "tip": "", "publish": true}, {"date": "2016-04-04T13:34:28.498380", "description": "Sem letra X", "key": "QMzBscMZU", "input": "x\nnao tem a letra que fica antes do y nessa frase", "owner": "matheusgr@gmail.com", "output": "0", "tip": "", "publish": true}, {"date": "2016-04-04T13:34:28.712780", "description": "c", "key": "Ocrt1Z3lw", "input": "c\ncontadores sao legais", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-04-04T13:34:28.759970", "description": "l", "key": "SgbTleTgG", "input": "l\nagora apareceu no final", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-04-04T13:34:28.952020", "description": "caso b\u00e1sico 2", "key": "SxVOm5fDU", "input": "e\nexemplo de teste", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}], "date": "2016-04-04T13:34:28.999590", "name": "Contando Letra", "tags": [""], "tip": "", "publish": true, "canceled": false, "key": "LvlHaCHJY", "owner": "matheusgr@gmail.com", "description": "A an\u00e1lise da frequ\u00eancia de letras \u00e9 uma t\u00e9cnica bastante importante para avaliar a seguran\u00e7a de mensagens. Fa\u00e7a um programa que receba duas linhas como entrada. Na primeira linha, ser\u00e1 colocada uma letra para avaliar a frequ\u00eancia desta letra. A segunda entrada ser\u00e1 composta por uma frase na qual voc\u00ea deve contar o n\u00famero de vezes que a letra colocada na primeira entrada aparece. Veja o exemplo."}, {"tests": [{"date": "2016-04-04T13:28:16.249900", "description": "Exemplo b\u00e1sico", "key": "NdoRLPekK", "input": "5000 3000 4000\n4000 5000 1000", "owner": "matheusgr@gmail.com", "output": "4000\n-2000", "tip": "", "publish": true}, {"date": "2016-04-04T13:28:16.351640", "description": "4 filiais", "key": "NSoEZQGq8", "input": "20000 10000 40000 10000\n10000 5000 50000 5000", "owner": "matheusgr@gmail.com", "output": "20000\n-10000", "tip": "", "publish": true}, {"date": "2016-04-04T13:28:16.460620", "description": "1 filial negativo", "key": "NHnD6cAlc", "input": "10000\n25000", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-04-04T13:28:16.515160", "description": "1 filial positivo", "key": "NWtNc9nLk", "input": "30000\n5000", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-04-04T13:28:16.580610", "description": "1 filial, zero", "key": "SNOuH48EC", "input": "0\n0", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-04-04T13:28:16.628140", "description": "1 filial, zero", "key": "Sbr4kh6sC", "input": "10000\n10000", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-04-04T13:28:16.675890", "description": "5 filiais, zero", "key": "ScWKiuxAe", "input": "1 2 3 4 5\n1 2 3 4 5", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-04-04T13:28:16.737890", "description": "5 filiais misto", "key": "SRVJG6r68", "input": "1 2 3 4 5\n5 4 3 2 1", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}], "date": "2016-04-04T13:28:16.789220", "name": "Receitas e Despesas de Filiais", "tags": [""], "tip": "", "publish": true, "canceled": false, "key": "Q5DoClkIa", "owner": "matheusgr@gmail.com", "description": "Como administradora de diferentes filiais, \u00e9 importante conhecer a sa\u00fade financeira de cada uma delas. Para isto, cada empresa manda um relat\u00f3rio das receitas e despesas de cada m\u00eas. O lucro retornado por cada filial \u00e9, ent\u00e3o, o total de receitas menos o total de despesas.\n\nFa\u00e7a um programa que apresente o total de lucro que foi positivo de todas as filiais e o total de lucro negativo dessas filiais. Por exemplo, se tr\u00eas filiais tem como receita 5000, 3000 e 4000, respectivamente. E tem como despesas: 4000, 5000 e 1000, o total de lucros dela ser\u00e1: 1000, -2000 e 3000, respectivamente. Assim, o total de lucro positivo das filiais \u00e9 de 4000 (1000 + 3000) e o total de lucro negativo \u00e9 -2000.\n\nO programa recebe duas linhas como entrada: a receita das filiais (em n\u00fameros inteiros) e a despesa das filiais (tamb\u00e9m em n\u00fameros inteiros). A sa\u00edda deve ser primeiro do total de lucro positivo das filiais seguido pelo total de lucro negativo. Veja o exemplo abaixo."}, {"tests": [{"date": "2016-03-30T13:52:14.253980", "description": "Exemplo (2+4+6)", "key": "Pu9DoMTQm", "input": "1 2 3 4 5 6", "owner": "matheusgr@gmail.com", "output": "12", "tip": "", "publish": true}, {"date": "2016-03-30T13:52:14.373420", "description": "1 elemento par", "key": "Sy18KexJw", "input": "1112", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-03-30T13:52:14.421960", "description": "elementos pares na ponta", "key": "SedtDwOmW", "input": "100 21 23 25 27 200", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}], "date": "2016-03-30T13:52:14.480230", "name": "Somando Pares", "tags": [""], "tip": "", "publish": true, "canceled": false, "key": "Q9RSE5qiG", "owner": "matheusgr@gmail.com", "description": "Um padr\u00e3o bastante comum na resolu\u00e7\u00e3o de problemas de repeti\u00e7\u00e3o est\u00e1 na soma dos elementos quando estes satisfazem determinada condi\u00e7\u00e3o. Veja o exemplo abaixo:\n\n```\nsomador = 0\nfor elemento in LISTA:\n    if elemento CONDICAO:\n        somador = elemento + somador\n```\n\n`somador` \u00e9 uma vari\u00e1vel que armazenar\u00e1 o valor da soma dos elementos de `LISTA` que satisfazem determinada `CONDICAO`.\n\nPara testar o seu conhecimento nesse assunto, imprima a soma dos elementos de uma lista que s\u00e3o pares."}, {"tests": [{"date": "2016-03-30T13:52:01.299060", "description": "B\u00e1sico (2 e 4 pares)", "key": "SPvysWcqm", "input": "1 2 3 4 5", "owner": "matheusgr@gmail.com", "output": "2", "tip": "", "publish": true}, {"date": "2016-03-30T13:52:03.764060", "description": "1 elemento par", "key": "Q8ZGHwloe", "input": "10002", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-03-30T13:52:03.877410", "description": "1 elemento \u00edmpar", "key": "QAscsAGau", "input": "3333333333", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-03-30T13:52:03.960590", "description": "pares nas pontas", "key": "QPWuBeHBY", "input": "200 1111 333 4445 999887 889 2000", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-03-30T13:52:04.092870", "description": "Pares no meio", "key": "Q1CtqN6qe", "input": "122131233 222202020404 2040402  1004042 859913294 9129319234 201301245", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}], "date": "2016-03-30T13:52:04.206050", "name": "Contando Pares", "tags": [""], "tip": "", "publish": true, "canceled": false, "key": "NM1RJVlHE", "owner": "matheusgr@gmail.com", "description": "Um dos padr\u00f5es mais comuns de quest\u00f5es com repeti\u00e7\u00e3o \u00e9 realizar a atividade de contagem. Basicamente muitas das atividades de computa\u00e7\u00e3o exigem contar algo. Para isto, existe uma estrutura padr\u00e3o para esses programas:\n\n```\ncontador = 0\nfor elemento in LISTA:\n    if elemento CONDICAO:\n        contador = contador + 1\n```\n\nDada uma `LISTA`, quando `elemento` satisfaz determinada `CONDICAO`, o contador recebe \u00e9 incrementado.\n\nPara testar o uso desse padr\u00e3o, fa\u00e7a um programa que conte a quantidade de n\u00fameros pares de uma lista. Veja o exemplo abaixo."}, {"tests": [{"date": "2016-03-30T13:51:47.423310", "description": "B\u00e1sico (10-5, 20-10, 30-20, 40-40)", "key": "Np1LjADLM", "input": "10 20 30 40\n5 10 20 40", "owner": "matheusgr@gmail.com", "output": "5\n10\n10\n0", "tip": "", "publish": true}, {"date": "2016-03-30T13:51:47.496370", "description": "1 elemento", "key": "NGDsj1wWG", "input": "1\n1", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-03-30T13:51:50.223020", "description": "negativo", "key": "NUvn4RiS0", "input": "0 0\n10 10", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-03-30T13:51:50.292310", "description": "5 elementos", "key": "PsXFdezhI", "input": "1 2 3 4 5\n5 4 3 2 1", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}], "date": "2016-03-30T13:51:50.442840", "name": "Convertendo Lista", "tags": [""], "tip": "", "publish": true, "canceled": false, "key": "QQWD6UihM", "owner": "matheusgr@gmail.com", "description": "Uma lista gerada pela aplica\u00e7\u00e3o de um `split` numa string \u00e9 uma lista de elementos do tipo string. Se esta lista for composta de n\u00fameros e desejarmos manipular tais n\u00fameros, n\u00f3s podemos converter tal lista para fazer uso dessa informa\u00e7\u00e3o. Veja o exemplo:\n\n```\nentrada = \"1 2 3 4 5\"\nentrada_lista = entrada.split()\nentrada_int = []\nfor elemento in entrada_lista:\n    entrada_int.append(int(elemento))\n```\n\nFa\u00e7a um programa que receba duas listas de n\u00fameros (cada lista em uma linha) e imprima a diferen\u00e7a da primeira lista com a segunda lista. Veja o exemplo."}, {"tests": [{"date": "2016-03-30T13:51:29.486760", "description": "Exemplo B\u00e1sico", "key": "NVc0EJmKW", "input": "casa caneta caneca cerveja\nbonita feia cheia fria", "owner": "matheusgr@gmail.com", "output": "casa bonita\ncaneta feia\ncaneca cheia\ncerveja fria", "tip": "", "publish": true}, {"date": "2016-03-30T13:51:29.562760", "description": "1 elemento", "key": "Pq4vnmHgW", "input": "teste\nfruta", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-03-30T13:51:36.034290", "description": "5 elementos", "key": "Q4mq9C3cG", "input": "a b c d e\nf g h i j", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}], "date": "2016-03-30T13:51:36.147970", "name": "Dividindo Strings", "tags": [""], "tip": "", "publish": true, "canceled": false, "key": "SyzD4CAQC", "owner": "matheusgr@gmail.com", "description": "Dada uma string `teste` com valor `'casa caneta papel'` \u00e9 poss\u00edvel criar uma lista com os elementos `'casa', 'caneta', 'papel'` usando o m\u00e9todo `split`. Veja o exemplo:\n```\nteste = 'casa caneta papel'\nlista_teste = teste.split()\nprint(\"0:\", lista_teste[0])\nprint(\"1:\", lista_teste[1])\nprint(\"2:\", lista_teste[2])\n```\n\nA sa\u00edda deste programa conter\u00e1 3 linhas descrevendo os elementos da lista (`0: casa`, etc). \u00c9 comum receber uma linha como entrada que represente uma lista e esteja separada por espa\u00e7os. \u00c9 atrav\u00e9s do uso do `split` que podemos converter esta linha em uma lista. Fa\u00e7a um programa que receba duas linhas como entrada. Cada linha ter\u00e1 o mesmo n\u00famero de palavras separadas por espa\u00e7o. Seu programa deve imprimir tais palavras de forma intercalada. Veja o exemplo para ter clareza da especifica\u00e7\u00e3o.\n\nDica: para pegar o tamanho da lista gerada pelo `split`, utilize a fun\u00e7\u00e3o `len`."}, {"tests": [{"date": "2016-03-28T14:13:02.252550", "description": "", "key": "Njb0XznUG", "input": "exemplo", "owner": "matheusgr@gmail.com", "output": "1: e\n2: x\n3: e\n4: m\n5: p\n6: l\n7: o", "tip": "", "publish": true}, {"date": "2016-03-28T14:13:02.373240", "description": "", "key": "QEhJDcq92", "input": "casa", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-03-28T14:13:02.502330", "description": "", "key": "PzfbkaAWu", "input": "a", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-03-28T14:13:02.606560", "description": "outro exemplo", "key": "NKZfJCY08", "input": "outro", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}], "date": "2016-03-28T14:13:02.676740", "name": "Imprimindo a ordem das letras", "tags": [""], "tip": "", "publish": true, "canceled": false, "key": "NDUgYIb8i", "owner": "matheusgr@gmail.com", "description": "Fa\u00e7a um programa que receba uma palavra como entrada e indique qual o primeiro caractere, qual o segundo caractere, etc. Veja o exemplo."}, {"tests": [{"date": "2016-03-28T14:12:57.298890", "description": "4 elementos", "key": "Pqprp9040", "input": "4\n10\n11\n12\n13", "owner": "matheusgr@gmail.com", "output": "0 10\n1 11\n2 12\n3 13", "tip": "", "publish": true}, {"date": "2016-03-28T14:12:57.407860", "description": "3 elementos", "key": "NY3rUxWgi", "input": "3\n5\n10\n20", "owner": "matheusgr@gmail.com", "output": "0 5\n1 10\n2 20", "tip": "", "publish": true}, {"date": "2016-03-28T14:12:57.472010", "description": "6 elementos", "key": "Q5hIjIULo", "input": "6\n0\n1\n2\n3\n4\n5", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-03-28T14:12:57.544660", "description": "1 elemento", "key": "QBBBoTvrk", "input": "1\n1000", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}], "date": "2016-03-28T14:12:57.678980", "name": "Usando o \u00cdndice de Repeti\u00e7\u00e3o", "tags": [""], "tip": "", "publish": true, "canceled": false, "key": "NgD54cA0e", "owner": "matheusgr@gmail.com", "description": "O comando `for` \u00e9 um comando usado para execu\u00e7\u00e3o repetida de um c\u00f3digo de bloco e segue o seguinte formato:\n\n```\n\nfor VARIAVEL in LISTA:\n    COMANDO\n    COMANDO\n    ...\n    COMANDO\n\n```\n\nOs comandos dentro do bloco de c\u00f3digo dentro do `for` ser\u00e1 executado quantas vezes for o tamanho da lista. Ou seja, `4` vezes para a lista gerada por `range(4)`, `3` vezes para a lista `[10, 10, 10]`, `5` vezes para a string `aeiou`.\n\nO comando `for` permite, al\u00e9m da execu\u00e7\u00e3o repetida de c\u00f3digo, a atribui\u00e7\u00e3o de uma vari\u00e1vel de controle de repeti\u00e7\u00e3o. A vari\u00e1vel `VARIAVEL` definida no comando do `for` ter\u00e1 o valor de cada elemento da lista por vez.\n\nConsidere, por exemplo, o c\u00f3digo abaixo:\n\n```\nfor valor in 'aeiou':\n    print(\"VOGAL: \" + valor)\n```\n\nA sa\u00edda deste programa ser\u00e1 `a`, `e`, `i`, `o` e `u`, cada uma em uma linha. Isto acontece porque cada vez que Python executa os comandos definidos no bloco do for, ele atribui a vari\u00e1vel com um dos elementos da lista e faz isso seguindo a ordem da lista.\n\nFa\u00e7a um programa que receba uma entrada, indicando o n\u00famero de elementos a serem lidos. Seu programa deve imprimir cada uma dessas entradas lidas antecedidas pelo n\u00famero 0, 1, 2... etc. (em sequencia). Veja o exemplo para enteder melhor o que se pede."}, {"tests": [{"date": "2016-03-28T14:12:51.764990", "description": "Duas Listas, [1, 2, 3] e [10, 20, 30]", "key": "LymcBAcaG", "input": "3\n1\n2\n3\n10\n20\n30", "owner": "matheusgr@gmail.com", "output": "11\n22\n33", "tip": "", "publish": true}, {"date": "2016-03-28T14:12:51.840210", "description": "Listas de 1 elemento cada", "key": "Sdp8tEIYy", "input": "1\n10\n15", "owner": "matheusgr@gmail.com", "output": "25", "tip": "", "publish": true}, {"date": "2016-03-28T14:12:51.892530", "description": "5 elementos", "key": "Sp2wMIUCG", "input": "5\n1\n2\n3\n4\n5\n1\n2\n3\n4\n5", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}], "date": "2016-03-28T14:12:51.977640", "name": "Somando duas listas", "tags": [""], "tip": "", "publish": true, "canceled": false, "key": "NGi8iXnAO", "owner": "matheusgr@gmail.com", "description": "Fa\u00e7a um programa que leia uma entrada `n`. Este valor inteiro ser\u00e1 o tamanho de duas listas a serem lidas. Em seguida, `2 * n` entradas ser\u00e3o fornecidas. As primeiras `n`entradas ser\u00e3o os elementos da primeira lista e as `n` entradas seguintes ser\u00e3o os elementos da segunda lista. Imprima a soma dessas duas listas. Veja os exemplos para entender o que se pede."}, {"tests": [{"date": "2016-03-28T14:12:45.610040", "description": "B\u00e1sico", "key": "PvkhnuBiy", "input": "3\n0\n10\n20\n1", "owner": "matheusgr@gmail.com", "output": "10", "tip": "", "publish": true}, {"date": "2016-03-28T14:12:45.751560", "description": "B\u00e1sico 2", "key": "PwELGVvg8", "input": "5\n11\n12\n13\n14\n15\n4", "owner": "matheusgr@gmail.com", "output": "15", "tip": "", "publish": true}, {"date": "2016-03-28T14:12:45.880940", "description": "Come\u00e7o", "key": "QMUEfXA2K", "input": "2\n20\n30\n0", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-03-28T14:12:45.955670", "description": "Limite grande", "key": "SjOmiDrM0", "input": "10\n10\n20\n30\n40\n50\n60\n70\n80\n90\n0\n9", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-03-28T14:12:46.047280", "description": "Meio", "key": "M4Tlar5GK", "input": "3\n9\n8\n7\n1", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}], "date": "2016-03-28T14:12:46.121570", "name": "Repetindo Comandos", "tags": [""], "tip": "", "publish": true, "canceled": false, "key": "QFBtHY920", "owner": "matheusgr@gmail.com", "description": "Por vezes \u00e9 comum escrever um c\u00f3digo como este:\n\n```\nentradas = []\nentradas.append(input())\nentradas.append(input())\nentradas.append(input())\nentradas.append(input())\nentradas.append(input())\n```\n\nObserve que este c\u00f3digo cria uma lista vazia (`entradas`), captura cinco elementos da entrada e insere tais elementos na lista `entradas`. Note que h\u00e1 uma repeti\u00e7\u00e3o do c\u00f3digo a ser executado (`entradas.append(input())`).\n\nLinguagens de programa\u00e7\u00e3o como Python oferecem comandos para executar um mesmo bloco de c\u00f3digo repetidas vezes. Em Python isto \u00e9 feito com o comando `for`. Veja o equivalente ao c\u00f3digo acima:\n\n```\nentradas = []\nfor index in range(5):\n    entradas.append(input())\n```\n\nPor baixo, o comando for est\u00e1 fazendo uso do `range`, que \u00e9 uma fun\u00e7\u00e3o que gera listas. O `range(5)` gera a lista `[0, 1, 2, 3, 4]`, ou seja, uma lista de 5 elementos. Outro exemplo, `range(3)` gera a lista `[0, 1, 2]`. O bloco de c\u00f3digo abaixo do for ser\u00e1 executado tantas vezes for o tamanho da lista depois do `in`. Observe que voce pode usar uma vari\u00e1vel, por exemplo `n`, dentro do `range` para que o bloco seja repetido `n` vezes. O bloco acima \u00e9 equivalente ao seguinte c\u00f3digo:\n\n```\nentradas = []\nfor index in [0, 1, 2, 3, 4]:\n    entradas.append(input())\n```\n\nPara testar seu conhecimento, fa\u00e7a um programa que receba como entrada um n\u00famero `n` que ser\u00e1 a quantidade de elementos de uma lista. Em seguida, ser\u00e3o lidas `n` entradas e, por fim, haver\u00e1 outra entrada indicando uma posi\u00e7\u00e3o da lista a ser impressa como sa\u00edda.\n\nComo exemplo, se for lida a entrada `3`, haver\u00e1 tr\u00eas entradas representando os 3 elementos da lista a serem lidos, por exemplo, `0`,`10`, `20`. Em seguida haver\u00e1 uma \u00faltima entrada indicando qual elemento da lista deve ser impresso. No exemplo, se for lido a entrada `1`, deve ser impresso o valor `10` na sa\u00edda.\n\nTente implementar seu programa baseando-se na seguinte id\u00e9ia:\n\n```\nCRIE LISTA ENTRADAS\nLEIA ENTRADA N\nEXECUTE N VEZES:\n    COLOQUE ELEMENTO DA ENTRADA EM ENTRADAS\nLEIA POSICAO P\nIMPRIMA ELEMENTO NA POSICAO P DA LISTA ELEMENTOS\n```\n\nVeja os exemplos de entrada e sa\u00edda."}, {"tests": [{"date": "2016-03-21T15:21:42.207810", "description": "B\u00e1sico", "key": "SYWBOFvpQ", "input": "1\n2\n0\n1\nuva\nameixa\njaca\ncama", "owner": "matheusgr@gmail.com", "output": "veja", "tip": "", "publish": true}, {"date": "2016-03-21T15:21:42.293310", "description": "Outro exemplo", "key": "SOdX7xMIK", "input": "0\n2\n0\n1\nfesta\ncalma\nouvido\nkwait", "owner": "matheusgr@gmail.com", "output": "flow", "tip": "", "publish": true}, {"date": "2016-03-21T15:21:42.377500", "description": "ultimo", "key": "NUunFIXwm", "input": "3\n3\n3\n3\nabcd\nefgh\nijkl\nmnop", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-03-21T15:21:42.451600", "description": "primeira", "key": "NFNF2bYH2", "input": "0\n0\n0\n0\nabc\ndef\nghi\njkl", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}], "date": "2016-03-21T15:21:42.535530", "name": "Gerando senhas com m\u00e1scara", "tags": [""], "tip": "", "publish": true, "canceled": false, "key": "NEvQySfxo", "owner": "matheusgr@gmail.com", "description": "\u00c9 comum fazer uso de uma m\u00e1scara para gerar senhas ou mensagens criptografadas de forma ainda mais segura. Uma m\u00e1scara indica aonde num texto a informa\u00e7\u00e3o deve ser extra\u00edda.\n\nFa\u00e7a um programa que recebe quatro n\u00fameros e depois quatro palavras. Esses quatro n\u00fameros indicar\u00e3o a posi\u00e7\u00e3o do caractere relevante de cada palavra. Cada caractere relevante deve ser concatenado para gerar uma senha. Por exemplo, considere as entradas: 1, 2, 0 e 1. Considere 4 palavras de entrada: uva, ameixa, jaca, cama. Os caracteres relevantes s\u00e3o 'v' (posi\u00e7\u00e3o 1 de uva), 'e' (posi\u00e7\u00e3o 2 de ameixa), 'j' (posi\u00e7\u00e3o 0 de java) e 'a' (posi\u00e7\u00e3o 1 de cama).\n\nSeu programa deve imprimir a seha concatenada, considerando essas 8 entradas. Veja o exemplo."}, {"tests": [{"date": "2016-03-21T14:03:59.686310", "description": "2 + 6...", "key": "SUE2rbEp6", "input": "1\n2\n3\n4\n5\n6\n7\n8\n1", "owner": "matheusgr@gmail.com", "output": "8", "tip": "", "publish": true}, {"date": "2016-03-21T14:03:59.787030", "description": "", "key": "Nb6F8ue24", "input": "1\n2\n3\n4\n5\n6\n7\n8\n0", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-03-21T14:03:59.938760", "description": "", "key": "ShVSAb8yW", "input": "1\n2\n3\n4\n5\n6\n7\n8\n2", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-03-21T14:04:00.039320", "description": "", "key": "MFDSszP7o", "input": "1\n2\n3\n4\n5\n6\n7\n8\n3", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-03-21T14:04:00.124720", "description": "", "key": "M84JhAJua", "input": "0\n0\n0\n0\n1\n1\n1\n1\n1", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}], "date": "2016-03-21T14:04:00.202070", "name": "Soma de Duas Listas", "tags": [""], "tip": "", "publish": true, "canceled": false, "key": "NKRdmLuj2", "owner": "matheusgr@gmail.com", "description": "Fa\u00e7a um programa que receba 4 entradas, compondo uma lista e mais 4 entradas compondo outra lista. Por fim, o programa recebe uma entrada indicando um \u00edndice. Seu programa deve ter como sa\u00edda a soma dos valores que est\u00e3o nas listas no \u00edndice indicado. Veja o exemplo."}, {"tests": [{"date": "2016-03-21T13:34:17.611500", "description": "\u00c1lcool melhor", "key": "T0NGBF3rc", "input": "2.40\n3.50\n10", "owner": "matheusgr@gmail.com", "output": "24.0", "tip": "", "publish": true}, {"date": "2016-03-21T13:34:17.740340", "description": "Gasolina melhor", "key": "QHBHAYnIm", "input": "3.0\n4.0\n20", "owner": "matheusgr@gmail.com", "output": "80.0", "tip": "", "publish": true}, {"date": "2016-03-21T13:34:17.846610", "description": "Limite", "key": "M630YMFVI", "input": "0.7\n1.0\n10", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-03-21T13:34:17.894560", "description": "", "key": "NVnZoGbQW", "input": "0.01\n0.10\n10", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}], "date": "2016-03-21T13:34:17.942390", "name": "Gasolina ou \u00c1lcool?", "tags": [""], "tip": "", "publish": true, "canceled": false, "key": "QGl8F3JGy", "owner": "matheusgr@gmail.com", "description": "O \u00e1lcool \u00e9 um combust\u00edvel com 70% do rendimento da gasolina de posto, assim, se o pre\u00e7o do \u00e1lcool for maior ou igual a 70% do valor do pre\u00e7o da gasolina, \u00e9 prefer\u00edvel preencher o tanque com gasolina.\n\nFa\u00e7a um programa que receba como entrada o pre\u00e7o do litro do \u00e1lcool, o pre\u00e7o do litro da gasolina e a quantidade de litros a serem colocados. O programa deve imprimir o total gasto no posto, considerando que o tanque foi preenchido com o combust\u00edvel de melhor custo/benef\u00edcio. Veja os exemplos."}, {"tests": [{"date": "2016-03-21T13:07:36.747960", "description": "Base", "key": "PxpaATlFg", "input": "0\n1\n2\n3\n4\n1\n100", "owner": "matheusgr@gmail.com", "output": "0\n100\n2\n3\n4", "tip": "", "publish": true}, {"date": "2016-03-21T13:07:36.851350", "description": "", "key": "QMoQzUFdo", "input": "10\n11\n12\n13\n14\n0\n5", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-03-21T13:07:36.978660", "description": "", "key": "PuIgr6FtI", "input": "20\n21\n22\n23\n24\n2\n200", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-03-21T13:07:37.135080", "description": "", "key": "NMIFqC8QK", "input": "30\n31\n32\n33\n34\n3\n300", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-03-21T13:07:37.223700", "description": "", "key": "NX8zQMZhw", "input": "40\n41\n42\n43\n44\n4\n400", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}], "date": "2016-03-21T13:07:37.293160", "name": "Alterando Uma Lista", "tags": [""], "tip": "", "publish": true, "canceled": false, "key": "NQFwW4McK", "owner": "matheusgr@gmail.com", "description": "Fa\u00e7a um programa que receba 5 valores inteiros representando elementos de uma lista. Em seguida seu programa deve receber um \u00edndice como entrada e um novo valor. Imprima a lista com o valor alterado. Veja o exemplo."}, {"tests": [{"date": "2016-03-21T12:57:47.579670", "description": "Base", "key": "PyFG5Un8i", "input": "amador\nadorado\naferido\ncabuloso\n", "owner": "matheusgr@gmail.com", "output": "adeu", "tip": "", "publish": true}, {"date": "2016-03-21T12:57:47.687160", "description": "Secreto", "key": "QKQ4FwlCy", "input": "abcd\nefgh\nijkl\nmnop", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}], "date": "2016-03-21T12:57:47.759670", "name": "Gerando Senha", "tags": [""], "tip": "", "publish": true, "canceled": false, "key": "Q702V6usC", "owner": "matheusgr@gmail.com", "description": "Para gerar uma senha de forma autom\u00e1tica, um sistema recebe 4 palavras como entrada e deve gerar uma senha baseada nessas palavras. A senha \u00e9 a primeira letra da primeira palavra, mais a segunda letra da segunda palavra, assim sucessivamente. Considere que todas as palavras tem mais do que 4 letras. Imprima a senha gerada desta maneira dado as 4 entradas. Veja o exemplo."}, {"tests": [{"date": "2016-03-16T17:25:37.866160", "description": "B\u00e1sico", "key": "L4RLebLc0", "input": "10\n20\n30\n40\n50\n2", "owner": "matheusgr@gmail.com", "output": "30", "tip": "", "publish": true}, {"date": "2016-03-16T17:25:37.962130", "description": "", "key": "MIPu3Q7Lk", "input": "10\n20\n30\n40\n50\n0", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-03-16T17:25:38.067360", "description": "1", "key": "Q6f2xAkj2", "input": "10\n20\n30\n40\n50\n1", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-03-16T17:25:38.211010", "description": "", "key": "QHj9kkuno", "input": "10\n20\n30\n40\n50\n3", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-03-16T17:25:38.269170", "description": "", "key": "TKNUK3mXQ", "input": "10\n20\n30\n40\n50\n4", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}], "date": "2016-03-16T17:25:38.360820", "name": "Listas", "tags": [""], "tip": "", "publish": true, "canceled": false, "key": "L83Li3Dvs", "owner": "matheusgr@gmail.com", "description": "Estruturas compostas s\u00e3o importante para agregar elementos que tem o mesmo significado l\u00f3gico em um problema. Como exemplo, ao armazenar os dias trabalhados nos meses do ano, \u00e9 estranho ter 12 vari\u00e1veis: `mes1`, `mes2`, `mes3`, \u2026 No lugar, podemos criar uma estrutura composta chamada `mes`. Essa estrutura composta \u00e9 uma lista e pode ser constru\u00edda de duas formas:\n```\nmes = []\n```\n\nOu:\n```\nmes = list()\n```\n\nAs duas formas atribuem uma lista vazia \u00e0 vari\u00e1vel mes. Para colocar elementos na lista, usamos o m\u00e9todo `append` e para acessar um elemento, usamos o operador de \u00edndice (`[]`). Veja o exemplo de um programa de manipula\u00e7\u00e3o de conta que recebe 3 valores inteiros de entrada (representando a opera\u00e7\u00e3o em centavos):\n\n```\nconta = []\n\nconta.append(int(input()))\nconta.append(int(input()))\nconta.append(int(input()))\n\nprint(\"PRIMEIRA OP:\", conta[0])\nprint(\"ULTIMA OP:\", conta[-1])\n\nprint(\"TOTAL: \" + str(conta[0] + conta[1] + conta[2]))\n```\n\n\u00c9 poss\u00edvel criar uma lista com elementos j\u00e1 existentes. Para tanto, basta definir quais os elementos da lista. Exemplo: `[1, 2, 3]` \u00e9 o equivalente a criar uma lista vazia e invocar 3 vezes o append nessa lista com os elementos `1`, `2` e `3`.\n\n\u00c9 poss\u00edvel tamb\u00e9m alterar o valor de uma lista, basta, para isso, atribuir o novo valor a lista com o \u00edndice a ser alterado. Exemplo:\n\n```\nentradas = [1, 2, 3]\nalterar = int(input())\nentradas[alterar] = int(input())\n\nprint(entradas[0])\nprint(entradas[1])\nprint(entradas[2])\n```\nEsse programa anterior recebe uma entrada, que \u00e9 o \u00edndice a ser alterado. Em seguida, recebe um novo valor a ser colocado no \u00edndice indicado. Para as entradas `1` e `0`,  a sa\u00edda ser\u00e3o os n\u00fameros `1, 0, 3` (cada um em uma linha).\n\nFa\u00e7a um programa que receba 6 valores inteiros. Os primeiros 5 valores ser\u00e3o colocados em uma lista. O 6\u00ba valor, indicar\u00e1 o \u00edndice do valor da lista a ser lido. Imprima na sa\u00edda o valor desse elemento da lista."}, {"tests": [{"date": "2016-03-16T14:10:21.296300", "description": "Base", "key": "M5zzc56My", "input": "00exemplo", "owner": "matheusgr@gmail.com", "output": "S", "tip": "", "publish": true}, {"date": "2016-03-16T14:10:21.396970", "description": "Exemplo negativo", "key": "QoJ9qYo1g", "input": "9negativo", "owner": "matheusgr@gmail.com", "output": "N", "tip": "", "publish": true}, {"date": "2016-03-16T14:10:21.465630", "description": "Outro exemplo negativo", "key": "P6Fxk0nzs", "input": "n", "owner": "matheusgr@gmail.com", "output": "N", "tip": "", "publish": true}, {"date": "2016-03-16T14:10:21.521960", "description": "positivo 1", "key": "NapN6EKzQ", "input": "12positivo", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-03-16T14:10:21.571970", "description": "positivo 2", "key": "To7V2g5gG", "input": "34sim", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-03-16T14:10:21.619640", "description": "Positivo 3", "key": "Ofoka2S4e", "input": "56", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-03-16T14:10:21.703970", "description": "Positivo 7", "key": "LkZP4lBUe", "input": "78", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-03-16T14:10:21.776850", "description": "Positivo final", "key": "O3JtLTQeW", "input": "90", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-03-16T14:10:21.856840", "description": "negativo segundo elemento", "key": "OES6loSrQ", "input": "s0negativo", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}], "date": "2016-03-16T14:10:21.903570", "name": "Dois D\u00edgitos", "tags": [""], "tip": "", "publish": true, "canceled": false, "key": "Rg70ol9A8", "owner": "matheusgr@gmail.com", "description": "O programa abaixo serve para analisar se uma palavra colocada na entrada come\u00e7a com a s\u00edlaba \"ab\":\n\n```\nentrada = input()\nIf entrada[0:2] == \"ab\":\n    print(\"AB\")\nelse:\n    print(\"not AB\")\n```\n\nEsse operador de \u00edndice `:` permite acessar mais de um elemento, onde, para `0:2`, 0 \u00e9 o primeiro elemento a ser colocado (inclusive) e o 2 o \u00faltimo elemento do intervalo (n\u00e3o inclusive), ou seja, os elementos \u00e9 retornado `entrada[0] + entrada[1]`. Se usassemos o \u00edndice `1:4`, isto seria equivalente a pegar os elementos `entrada[1], entrada[2], entrada[3]`.\n\nFa\u00e7a um programa que indique se uma entrada come\u00e7a com dois digitos. Se come\u00e7ar, imprima S. Imprima N caso contr\u00e1rio. A entrada pode ter qualquer tamanho, inclusive ser vazia. Veja os exemplos.\n"}, {"tests": [{"date": "2016-03-16T14:06:20.826650", "description": "", "key": "Ti0AeJqhU", "input": "10\n20\n30\n40\n50\n0\n2", "owner": "matheusgr@gmail.com", "output": "40", "tip": "", "publish": true}, {"date": "2016-03-16T14:06:20.874670", "description": "limites", "key": "RFfnemnEu", "input": "1\n2\n3\n4\n5\n0\n4", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-03-16T14:06:20.926460", "description": "dois \u00faltimos", "key": "R1hs95W6a", "input": "10\n20\n30\n40\n50\n3\n4", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-03-16T14:06:21.006780", "description": "Dois primeiros", "key": "U86JZgnHU", "input": "10\n20\n30\n40\n50\n0\n1", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-03-16T14:06:21.062380", "description": "O do meio e o \u00faltimo", "key": "SvH231plg", "input": "10\n20\n30\n40\n50\n2\n4", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}], "date": "2016-03-16T14:06:21.182250", "name": "Soma na Lista", "tags": [""], "tip": "", "publish": true, "canceled": false, "key": "Qw4Vizxo0", "owner": "matheusgr@gmail.com", "description": "Um programa recebe 7 inteiros, sendo 5 desses valores elementos de uma lista. A sa\u00edda deve ser a soma dos valores que se encontram nos \u00edndices indicados pelas duas \u00faltimas entradas."}, {"tests": [{"date": "2016-03-16T14:04:57.001640", "description": "", "key": "QfYhMGyMy", "input": "abacate\nbeijos\ncasa\ndado\nelefante", "owner": "matheusgr@gmail.com", "output": "2", "tip": "", "publish": true}, {"date": "2016-03-16T14:04:57.053790", "description": "", "key": "QaSztdITQ", "input": "amor\nelefante\nignorante\nolhudo\nuva", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-03-16T14:04:57.105220", "description": "", "key": "OMDSeFcdk", "input": "digo\nnenhuma\nvogal\nnesse\ncaso", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-03-16T14:04:57.153480", "description": "", "key": "OePOtBPLk", "input": "p\np\np\np\no", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-03-16T14:04:57.202550", "description": "", "key": "RC65i7uNc", "input": "o\np\np\np\np", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}], "date": "2016-03-16T14:04:57.260510", "name": "Vogais", "tags": [""], "tip": "", "publish": true, "canceled": false, "key": "RWtj7QnEO", "owner": "matheusgr@gmail.com", "description": "Um programa recebe 5 palavras como entrada (em min\u00fasculo). Fa\u00e7a um programa que conte quantas dessas palavras come\u00e7a em vogal. Veja os exemplos abaixo."}, {"tests": [{"date": "2016-03-16T13:56:19.330100", "description": "B\u00e1sico", "key": "RNj6EnpvE", "input": "4\n5\n6\n1\n5", "owner": "matheusgr@gmail.com", "output": "4\n10\n6", "tip": "", "publish": true}, {"date": "2016-03-16T13:56:19.380350", "description": "B\u00e1sico", "key": "MWOufGSpc", "input": "0\n0\n0\n0\n1", "owner": "matheusgr@gmail.com", "output": "1\n0\n0", "tip": "", "publish": true}, {"date": "2016-03-16T13:56:19.450530", "description": "Alterando o terceiro", "key": "QjK3HNbCC", "input": "10\n20\n30\n2\n20", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-03-16T13:56:19.526190", "description": "Alterando o primeiro", "key": "RcMXgnp32", "input": "5\n10\n20\n0\n5", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}], "date": "2016-03-16T13:56:19.581420", "name": "Listas", "tags": [""], "tip": "", "publish": true, "canceled": false, "key": "NNvW9SGx6", "owner": "matheusgr@gmail.com", "description": "Estruturas compostas s\u00e3o importante para agregar elementos que tem o mesmo significado l\u00f3gico em um problema. Como exemplo, ao armazenar os dias trabalhados nos meses do ano, \u00e9 estranho ter 12 vari\u00e1veis: `mes1`, `mes2`, `mes3`, \u2026 No lugar, podemos criar uma estrutura composta chamada `mes`. Essa estrutura composta \u00e9 uma lista e pode ser constru\u00edda de duas formas:\n```\nmes = []\n```\n\nOu:\n```\nmes = list()\n```\n\nAs duas formas atribuem uma lista vazia \u00e0 vari\u00e1vel mes. Para colocar elementos na lista, usamos o m\u00e9todo `append` e para acessar um elemento, usamos o operador de \u00edndice (`[]`). Veja o exemplo de um programa de manipula\u00e7\u00e3o de conta que recebe 3 valores inteiros de entrada (representando a opera\u00e7\u00e3o em centavos):\n\n```\nconta = []\n\nconta.append(int(input))\nconta.append(int(input))\nconta.append(int(input))\n\nprint(\"PRIMEIRA OP:\", conta[0])\nprint(\"ULTIMA OP:\", conta[-1])\n\nprint(\"TOTAL: \" + str(conta[0] + conta[1] + conta[2]))\n```\n\n\u00c9 poss\u00edvel criar uma lista com elementos j\u00e1 existentes. Para tanto, basta definir quais os elementos da lista. Exemplo: `[1, 2, 3]` \u00e9 o equivalente a criar uma lista vazia e invocar 3 vezes o append nessa lista com os elementos `1`, `2` e `3`.\n\n\u00c9 poss\u00edvel tamb\u00e9m alterar o valor de uma lista, basta, para isso, atribuir o novo valor a lista com o \u00edndice a ser alterado. Exemplo:\n\n```\nentradas = [1, 2, 3]\nalterar = int(input())\nentradas[alterar] = int(input())\n\nprint(entradas[0])\nprint(entradas[1])\nprint(entradas[2])\n```\nEsse programa anterior recebe uma entrada, que \u00e9 o \u00edndice a ser alterado. Em seguida, recebe um novo valor a ser colocado no \u00edndice indicado. Para as entradas `1` e `0`,  a sa\u00edda ser\u00e3o os n\u00fameros `1, 0, 3` (cada um em uma linha).\n\nFa\u00e7a um programa que receba 5 valores inteiros. Os primeiros 3 valores ser\u00e3o colocados em uma lista. O 4\u00ba valor, indicar\u00e1 o \u00edndice da lista a ser trabalhado. A sa\u00edda \u00e9 a soma do valor da lista no \u00edndice indicado anteriormente com o valor da 5\u00aa entrada. Veja os exemplos."}, {"tests": [{"date": "2016-03-14T14:12:57.085020", "description": "Singular", "key": "OVhJUW8fo", "input": "ACORDAR", "owner": "matheusgr@gmail.com", "output": "TALVEZ SINGULAR", "tip": "", "publish": true}, {"date": "2016-03-14T14:12:57.137910", "description": "N\u00e3o singular", "key": "Qgy2SnMRc", "input": "horas", "owner": "matheusgr@gmail.com", "output": "TALVEZ PLURAL", "tip": "", "publish": true}, {"date": "2016-03-14T14:12:57.194600", "description": "Singular", "key": "UG27ab5DE", "input": "noite", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-03-14T14:12:57.355600", "description": "Plural", "key": "UCTYYFWvA", "input": "DIAS", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}], "date": "2016-03-14T14:12:57.428590", "name": "\u00c9 t\u00e3o singular.", "tags": [""], "tip": "", "publish": true, "canceled": false, "key": "NjAy49WbI", "owner": "matheusgr@gmail.com", "description": "Para acessar o \u00faltimo elemento de uma cole\u00e7\u00e3o, basta pegar o tamanho dessa cole\u00e7\u00e3o e subtrair por 1. Por exemplo, `aeiou`. A letra `u` est\u00e1 na posi\u00e7\u00e3o `4` (`len('aeiou') - 1` que \u00e9 `5 - 1`). Python tamb\u00e9m permite acessar o \u00faltimo elemento atrav\u00e9s do \u00edndice `-1`.\n\nFa\u00e7a um programa que avalie se uma palavra recebida como entrada termina com os caracteres `s` ou `S`. Caso isso seja verdade, imprima \"TALVEZ PLURAL\", caso contr\u00e1rio, imprima \"TALVEZ SINGULAR\"."}, {"tests": [{"date": "2016-03-14T14:10:30.941400", "description": "est\u00e1 na l\u00edngua do p\u00ea", "key": "R5YMZGTq4", "input": "pepapig", "owner": "matheusgr@gmail.com", "output": "s", "tip": "", "publish": true}, {"date": "2016-03-14T14:10:30.995010", "description": "n\u00e3o est\u00e1 na lingua do p\u00ea", "key": "LXFwJIg76", "input": "prova", "owner": "matheusgr@gmail.com", "output": "n", "tip": "", "publish": true}, {"date": "2016-03-14T14:10:31.047290", "description": "l\u00edngua do p\u00ea", "key": "P6K1R6Osi", "input": "pum", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-03-14T14:10:31.102990", "description": "l\u00edngua do pe", "key": "P2lSOkqae", "input": "palindromo", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-03-14T14:10:31.149590", "description": "lingua do p", "key": "UDQFj91Dk", "input": "papai", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-03-14T14:10:31.196840", "description": "l\u00edngua do p\u00ea", "key": "OqRNWyMF6", "input": "pirao", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-03-14T14:10:31.246670", "description": "lingua do p", "key": "M8m1RfyNs", "input": "poeta", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-03-14T14:10:31.294000", "description": "n\u00e3o \u00e9 lingua do p", "key": "RfEXamj6u", "input": "pseudo", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-03-14T14:10:31.341780", "description": "n\u00e3o \u00e9 l\u00edngua do p", "key": "MR4gvoZPc", "input": "romance", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-03-14T14:10:31.408050", "description": "n\u00e3o \u00e9 l\u00edngua do p", "key": "UAoal1NVw", "input": "pleito", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-03-14T14:10:31.452770", "description": "Uma letra", "key": "LzbqOs9uy", "input": "a", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}], "date": "2016-03-14T14:10:31.542340", "name": "L\u00edngua do P\u00ca", "tags": [""], "tip": "", "publish": true, "canceled": false, "key": "NcJqzzOIS", "owner": "matheusgr@gmail.com", "description": "A l\u00edngua do p\u00ea \u00e9 uma lingua criada numa brincadeira de crian\u00e7as. Na l\u00edngua do p\u00ea cada palavra \u00e9 repetida com o acr\u00e9scimo de uma s\u00edlaba come\u00e7ada em P. Exemplo: \"pedro tinha uma casa bonita\" vira \"pepedro patinha peuma pacasa pobonita\". Fa\u00e7a um programa que identifique se uma palavra lida pode ser, ou n\u00e3o da l\u00edngua do p\u00ea, isto \u00e9, se ela come\u00e7a com \"pa\", \"pe\", \"pi\", \"po\" ou \"pu\"."}, {"tests": [{"date": "2016-03-14T13:58:50.755730", "description": "N\u00e3o \u00e9 vari\u00e1vel", "key": "P7CdS4efo", "input": "0algo", "owner": "matheusgr@gmail.com", "output": "N", "tip": "", "publish": true}, {"date": "2016-03-14T13:58:50.836520", "description": "Pode ser vari\u00e1vel", "key": "RRo6mhr16", "input": "entrada", "owner": "matheusgr@gmail.com", "output": "S", "tip": "", "publish": true}, {"date": "2016-03-14T13:58:50.912620", "description": "N\u00e3o \u00e9 vari\u00e1vel", "key": "RNFWRHC1g", "input": "1algo", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-03-14T13:58:50.958190", "description": "N\u00e3o \u00e9 vari\u00e1vel 2", "key": "M8fd0IR7I", "input": "2algo", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-03-14T13:58:51.005040", "description": "N\u00e3o \u00e9 vari\u00e1vel", "key": "NDlmx8y5g", "input": "3algo", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-03-14T13:58:51.080460", "description": "N\u00e3o \u00e9 vari\u00e1vel", "key": "Ol4kejbZQ", "input": "4algo", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-03-14T13:58:51.126160", "description": "N\u00e3o \u00e9 vari\u00e1vel", "key": "RdZCeOg3U", "input": "5algo", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-03-14T13:58:51.278100", "description": "N\u00e3o \u00e9 vari\u00e1vel", "key": "Le2W5Y6k4", "input": "6algo", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-03-14T13:58:51.323600", "description": "N\u00e3o \u00e9 vari\u00e1vel", "key": "SvvmoVlUO", "input": "7algo", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-03-14T13:58:51.373940", "description": "N\u00e3o \u00e9 vari\u00e1vel", "key": "R9LRRAlAO", "input": "8algo", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-03-14T13:58:51.449110", "description": "N\u00e3o \u00e9 vari\u00e1vel", "key": "REZzGYwfQ", "input": "9coisa", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-03-14T13:58:51.524370", "description": "\u00c9 vari\u00e1vel", "key": "LzASYdcfI", "input": "amor0", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-03-14T13:58:51.569670", "description": "\u00e9 vari\u00e1vel", "key": "STXcoOkeu", "input": "TESTE99", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}], "date": "2016-03-14T13:58:51.642300", "name": "Pode ser vari\u00e1vel?", "tags": [""], "tip": "", "publish": true, "canceled": false, "key": "QIrGXw5A0", "owner": "matheusgr@gmail.com", "description": "Para diferenciar nome de vari\u00e1veis de valores, python analisa os caracteres das palavras que comp\u00f5e o programa identificando se elas come\u00e7am com letras ou n\u00fameros. Se uma palavra come\u00e7ar com um n\u00famero, ela n\u00e3o pode ser uma vari\u00e1vel. Caso contr\u00e1rio, essa palavra pode ser uma vari\u00e1vel. Fa\u00e7a um programa que leia uma palavra e imprima `S` quando a palavra lida possa vir a ser o nome de uma vari\u00e1vel, e N, caso contr\u00e1rio."}, {"tests": [{"date": "2016-03-14T13:52:09.632860", "description": "Base", "key": "ScrKGr7Jo", "input": "1\n2\n3", "owner": "matheusgr@gmail.com", "output": "0", "tip": "", "publish": true}, {"date": "2016-03-14T13:52:09.714600", "description": "Dois Iguais", "key": "NkpvrNg0W", "input": "4\n9\n4", "owner": "matheusgr@gmail.com", "output": "2", "tip": "", "publish": true}, {"date": "2016-03-14T13:52:09.806870", "description": "Tr\u00eas Iguais", "key": "NYVqzbBey", "input": "7\n7\n7", "owner": "matheusgr@gmail.com", "output": "3", "tip": "", "publish": true}, {"date": "2016-03-14T13:52:09.873030", "description": "Dois Iguais", "key": "NHXMwFKV6", "input": "0\n5\n5", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-03-14T13:52:09.922940", "description": "Dois Iguais", "key": "RCaZcYKRs", "input": "81\n81\n10", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-03-14T13:52:10.068480", "description": "Tr\u00eas Iguais", "key": "MI0HMEh28", "input": "200\n200\n200", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-03-14T13:52:10.144500", "description": "Tr\u00eas diferentes", "key": "Sa2U69C88", "input": "999\n888\n777", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}], "date": "2016-03-14T13:52:10.220410", "name": "Entradas Iguais", "tags": [""], "tip": "", "publish": true, "canceled": false, "key": "QDxV4zJCK", "owner": "matheusgr@gmail.com", "description": "Fa\u00e7a um programa que receba tr\u00eas valores inteiros de entrada e diga quantos destes valores s\u00e3o iguais. Veja os exemplos de entrada e sa\u00edda para 3 execu\u00e7\u00f5es do programa:"}, {"tests": [{"date": "2016-03-07T16:21:41.663020", "description": "Alto", "key": "SUZRbratM", "input": "10000\n25000\n5", "owner": "matheusgr@gmail.com", "output": "ALTO (3000)", "tip": "", "publish": true}, {"date": "2016-03-07T16:21:41.759530", "description": "Baixo", "key": "RYeMfdUOW", "input": "0\n200\n2", "owner": "matheusgr@gmail.com", "output": "BAIXO (100)", "tip": "", "publish": true}, {"date": "2016-03-07T16:21:41.834930", "description": "Baixo 2", "key": "M9WjqIRfM", "input": "1000\n3000\n10", "owner": "matheusgr@gmail.com", "output": "BAIXO (200)", "tip": "", "publish": true}], "date": "2016-03-07T16:21:41.915290", "name": "Valor Baixo ou Alto da Parcela", "tags": [""], "tip": "", "publish": true, "canceled": false, "key": "P6WZNMkrI", "owner": "matheusgr@gmail.com", "description": "Escreva um programa que leia tr\u00eas entradas inteiras, sendo estas, respectivamente: o valor inicial pago, o valor total e o n\u00famero de parcelas de um pagamento. Seu programa deve calcular se o restante parcelado a pagar (valor total menos o valor inicial, tudo isso sobre o n\u00famero de parcelas) \u00e9 maior ou igual a 1000. Se for, este valor \u00e9 considerado ALTO, do contr\u00e1rio, \u00e9 considerado BAIXO. Voc\u00ea deve imprimir tamb\u00e9m o valor de cada parcela. Considere apenas a parte inteira de cada parcela.\n\nVeja os exemplos."}, {"tests": [{"date": "2016-03-02T14:04:02.817650", "description": "Todos crescentes", "key": "TEFxus6FM", "input": "1\n2\n3\n4", "owner": "matheusgr@gmail.com", "output": "POSSIVELMENTE ESTRITAMENTE CRESCENTE", "tip": "", "publish": true}, {"date": "2016-03-02T14:04:02.867910", "description": "Todos Decrescente", "key": "O36VXj3D6", "input": "4\n3\n2\n1", "owner": "matheusgr@gmail.com", "output": "POSSIVELMENTE ESTRITAMENTE DECRESCENTE", "tip": "", "publish": true}, {"date": "2016-03-02T14:04:02.922780", "description": "", "key": "LPMu00UQy", "input": "4\n4\n3\n2", "owner": "matheusgr@gmail.com", "output": "FUNCAO NAO ESTRITAMENTE CRES/DECR", "tip": "", "publish": true}, {"date": "2016-03-02T14:04:02.997080", "description": "Segundo igual", "key": "PER79nW6a", "input": "4\n3\n3\n2", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-03-02T14:04:03.150320", "description": "Terceiro igual", "key": "QdE5rKQMq", "input": "4\n3\n2\n2", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-03-02T14:04:03.204380", "description": "Aumenta no fim", "key": "TVI1mK7Au", "input": "4\n3\n2\n3", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-03-02T14:04:03.264720", "description": "Diminui no fim", "key": "LH1B7aS3c", "input": "1\n2\n3\n2", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-03-02T14:04:03.328020", "description": "Aumenta no come\u00e7o", "key": "TO7uoW9jM", "input": "4\n5\n4\n3", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-03-02T14:04:03.416000", "description": "Diminui no come\u00e7o", "key": "LsHyxPuhE", "input": "4\n3\n4\n5", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-03-02T14:04:03.469250", "description": "Crescente mais espa\u00e7ada", "key": "TKdkrQ81Y", "input": "1\n10\n1000\n100000", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-03-02T14:04:03.586800", "description": "Decrescente mais espa\u00e7ada", "key": "QzCinQRcW", "input": "1000\n100\n10\n1", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}], "date": "2016-03-02T14:04:03.635880", "name": "Fun\u00e7\u00e3o Mon\u00f3tona", "tags": [""], "tip": "", "publish": true, "canceled": false, "key": "O74TDGIEa", "owner": "matheusgr@gmail.com", "description": "Uma fun\u00e7\u00e3o mon\u00f3tona \u00e9 uma fun\u00e7\u00e3o que tem o mesmo comportamento crescente ou decrescente de valores. Quando todos os valores da fun\u00e7\u00e3o aumentam e n\u00e3o s\u00e3o iguais entre sim, chamamos essa fun\u00e7\u00e3o de estritamente crescente. Quando todos os valores da fun\u00e7\u00e3o diminuem (e tamb\u00e9m n\u00e3o s\u00e3o iguais entre si) chamamos essa fun\u00e7\u00e3o de estritamente decrescente.\n\n\u00c9 poss\u00edvel ter fortes ind\u00edcios de uma fun\u00e7\u00e3o ser estritamente crescente ou decrescente observando alguns valores da fun\u00e7\u00e3o. Se todos os valores forem crescentes esta fun\u00e7\u00e3o pode vir a ser uma fun\u00e7\u00e3o mon\u00f3tona estritamente crescente. Se todos os valores forem decrescentes, esta fun\u00e7\u00e3o pode vir a ser uma fun\u00e7\u00e3o mon\u00f3tona estritamente decrescente.\n\nFa\u00e7a um programa que receba 4 valores e retorne as mensagens \"POSSIVELMENTE ESTRITAMENTE CRESCENTE\" e \"POSSIVELMENTE ESTRITAMENTE DECRESCENTE\" se os valores recebidos forem, respectivamente, todos crescentes e diferentes entre si, todos decrescentes e diferentes entre si. Caso nenhuma dessas condi\u00e7\u00f5es seja satisfeita, imprima a mensagem: \"FUNCAO NAO ESTRITAMENTE CRES/DECR\"."}, {"tests": [{"date": "2016-03-02T13:55:06.695800", "description": "Sem comida (9.90 no bolso)", "key": "LmgTOcrfE", "input": "12.4\n5", "owner": "matheusgr@gmail.com", "output": "SEM COMIDA HOJE!", "tip": "", "publish": true}, {"date": "2016-03-02T13:55:06.746590", "description": "Pode comer (10.25 no bolso)", "key": "Udz0EoEym", "input": "12.75\n5", "owner": "matheusgr@gmail.com", "output": "PODE COMER!", "tip": "", "publish": true}, {"date": "2016-03-02T13:55:06.802810", "description": "no limite", "key": "Qno3qTlke", "input": "12.5\n5", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-03-02T13:55:06.890530", "description": "Zero caf\u00e9, no limite", "key": "O9EYTP7XU", "input": "10.0\n0", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-03-02T13:55:06.943610", "description": "Zero caf\u00e9, acima do limite", "key": "NsFggYi5A", "input": "10.01\n0", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-03-02T13:55:06.996540", "description": "Zero caf\u00e9, abaixo do limite", "key": "QZAmwTaJU", "input": "9.99\n0", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-03-02T13:55:07.050520", "description": "1 caf\u00e9, no limite", "key": "TQ2dnHZsu", "input": "10.5\n1", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-03-02T13:55:07.108970", "description": "1 caf\u00e9, abaixo do limite", "key": "TH90rpmNs", "input": "10.4\n1", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-03-02T13:55:07.174920", "description": "1 caf\u00e9 acima do limite", "key": "LnWvDIylE", "input": "10.6\n1", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}], "date": "2016-03-02T13:55:07.221990", "name": "Almo\u00e7o em Biloca", "tags": [""], "tip": "", "publish": true, "canceled": false, "key": "Tyr6BJWj2", "owner": "matheusgr@gmail.com", "description": "Um professor aparece na universidade com uma quantia X de dinheiro. Ao longo da manh\u00e3, ele bebe v\u00e1rios caf\u00e9s de 50 centavos e, se depois de tanto caf\u00e9, o professor ainda tiver 10 reais ou mais no bolso, o mesmo almo\u00e7ar\u00e1 pela universidade, mais especificamente no restaurante da dona Biloca.\n\nAssim, dada a quantia inicial de dinheiro que o professor tem e a quantidade de caf\u00e9s que s\u00e3o comprados ao longo da manh\u00e3. Fa\u00e7a um programa que imprime a mensagem \"PODE COMER!\" se o professor tiver 10 reais ou mais no bolso no final da manh\u00e3, ou \"SEM COMIDA HOJE!\" caso contr\u00e1rio."}, {"tests": [{"date": "2016-03-02T13:43:55.842330", "description": "Maiores", "key": "PUGu5JYeG", "input": "10\n9\n8", "owner": "matheusgr@gmail.com", "output": "S", "tip": "", "publish": true}, {"date": "2016-03-02T13:43:55.935360", "description": "Apenas Um Maior", "key": "Le5xgz5Q8", "input": "10\n8\n9", "owner": "matheusgr@gmail.com", "output": "N", "tip": "", "publish": true}, {"date": "2016-03-02T13:43:55.986740", "description": "Os Dois Menores", "key": "Qj5bY9Shk", "input": "8\n8\n10", "owner": "matheusgr@gmail.com", "output": "N", "tip": "", "publish": true}, {"date": "2016-03-02T13:43:56.036330", "description": "Maior", "key": "QS6jlJ3FQ", "input": "1000\n200000\n1", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-03-02T13:43:56.084190", "description": "Primeiro Maior", "key": "TmzbHuVlo", "input": "100000\n1\n10", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-03-02T13:43:56.134450", "description": "Segundo Maior", "key": "QqBaiXEie", "input": "1\n10000\n2", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-03-02T13:43:56.195280", "description": "Dois Menores", "key": "LXZrdakt6", "input": "10000\n10000\n2000000000", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-03-02T13:43:56.249930", "description": "Iguais", "key": "RbCmdUFNo", "input": "10\n10\n10", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-03-02T13:43:56.295290", "description": "Segundo igual", "key": "R3mwoerGi", "input": "30\n20\n20", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-03-02T13:43:56.351800", "description": "Primeiro igual", "key": "Qb4DCLh1U", "input": "20\n30\n20", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}], "date": "2016-03-02T13:43:56.429380", "name": "Maiores que um valor", "tags": [""], "tip": "", "publish": true, "canceled": false, "key": "Tv6m8WMfw", "owner": "matheusgr@gmail.com", "description": "Um programa deve calcular se dois valores s\u00e3o maiores que um terceiro valor. Fa\u00e7a um programa que recebe estes tr\u00eas valores X, Y e Z e diz se X e Y s\u00e3o maiores que Z ou n\u00e3o. Veja os exemplos de entrada e sa\u00edda abaixo."}, {"tests": [{"date": "2016-03-02T13:25:43.814500", "description": "Primeiro maior", "key": "OfAvOHw9I", "input": "10\n9", "owner": "matheusgr@gmail.com", "output": "10 > 9", "tip": "", "publish": true}, {"date": "2016-03-02T13:25:43.892670", "description": "Segundo Maior", "key": "Ol2ETwsWe", "input": "8\n11", "owner": "matheusgr@gmail.com", "output": "11 > 8", "tip": "", "publish": true}, {"date": "2016-03-02T13:25:43.944470", "description": "Dois Iguais", "key": "OncSxlWBU", "input": "10\n10", "owner": "matheusgr@gmail.com", "output": "10 = 10", "tip": "", "publish": true}, {"date": "2016-03-02T13:25:43.994830", "description": "Primeiro Maior", "key": "Pxevj0rSq", "input": "2\n0", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-03-02T13:25:44.051400", "description": "Segundo Maior", "key": "RP036ZBYm", "input": "1\n4", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-03-02T13:25:44.110350", "description": "Dois Iguais", "key": "SvEjwEqJ6", "input": "1\n1", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}], "date": "2016-03-02T13:25:44.188790", "name": "Maior Dois Valores Descritivo", "tags": [""], "tip": "", "publish": true, "canceled": false, "key": "RKtHYhDgu", "owner": "matheusgr@gmail.com", "description": "Um programa deve calcular qual o maior de dois valores inteiros. Fa\u00e7a esse programa que recebe duas entradas inteiras X e Y e imprime \"X > Y\" ou \"Y > X\" (dependendo qual valor for maior) ou \"X = Y\" se os dois valores forem iguais."}, {"tests": [{"date": "2016-03-02T13:19:54.997500", "description": "Primeiro maior", "key": "U01Ey7egi", "input": "10\n9", "owner": "matheusgr@gmail.com", "output": "10", "tip": "", "publish": true}, {"date": "2016-03-02T13:19:55.048490", "description": "Segundo maior", "key": "MI3ixffiC", "input": "9\n11", "owner": "matheusgr@gmail.com", "output": "11", "tip": "", "publish": true}, {"date": "2016-03-02T13:19:55.129310", "description": "Dois iguais", "key": "OnCJk5hpY", "input": "8\n8", "owner": "matheusgr@gmail.com", "output": "8", "tip": "", "publish": true}, {"date": "2016-03-02T13:19:55.182030", "description": "Primeiro maior", "key": "LwMOsUxCy", "input": "100\n0", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-03-02T13:19:55.261130", "description": "Segundo maior", "key": "RD8YDAAbY", "input": "0\n100", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-03-02T13:19:55.349180", "description": "Dois iguais", "key": "RU9LzDp0i", "input": "0\n0", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}], "date": "2016-03-02T13:19:55.399510", "name": "Maior de Dois Valores", "tags": [""], "tip": "", "publish": true, "canceled": false, "key": "RaMKoo8Ho", "owner": "matheusgr@gmail.com", "description": "Um programa deve calcular qual o maior de dois valores inteiros. Fa\u00e7a esse programa que recebe duas entradas inteiras X e Y e imprime o maior valor. Veja exemplos."}, {"tests": [{"date": "2016-03-02T13:15:37.048060", "description": "Passagem 10", "key": "NfphznwOW", "input": "10", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-03-02T13:15:37.098530", "description": "Passagem <10", "key": "SsHrMBIrw", "input": "9", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-03-02T13:15:37.150840", "description": "Passagem >10", "key": "RQABtNJWS", "input": "11", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}], "date": "2016-03-02T13:15:37.212710", "name": "Passagem", "tags": [""], "tip": "", "publish": true, "canceled": false, "key": "SgfzajXjU", "owner": "matheusgr@gmail.com", "description": "Ap\u00f3s avaliar a especifica\u00e7\u00e3o de um programa, um desenvolvedor chegou ao seguinte requisito do sistema:\n\n```\npassagem \u00e9 um valor inteiro da entrada\nse passagem for maior que 10:\n     imprima \"Passagem cara\"\n     imprima \"Valor: X\"  # (onde X \u00e9 o valor da passagem)\nse passagem for igual a 10:\n     imprima \"Passagem ok\"\nse a passagem for menor que 10:\n     imprima \"Passagem barata\"\n     imprima \"Valor: X\"  # (onde X \u00e9 o valor da passagem)\nsempre imprima \"Obrigado!\" no final\n```\n\nConverta esta especifica\u00e7\u00e3o para c\u00f3digo Python."}, {"tests": [{"date": "2016-02-29T14:10:15.003590", "description": "Com nome do receptor, mas sem nome do presente", "key": "T1iCmqa0G", "input": "s\nMatheus\nn", "owner": "matheusgr@gmail.com", "output": "Oi Matheus, espero que goste de receber presente!\nE Boas Festas!", "tip": "", "publish": true}, {"date": "2016-02-29T14:10:15.052140", "description": "Sem nome de pessoa, mas com nome do presente", "key": "Nu1Wo9ps8", "input": "n\ns\ncaneca", "owner": "matheusgr@gmail.com", "output": "Oi pessoa, espero que goste de receber caneca!\nE Boas Festas!", "tip": "", "publish": true}, {"date": "2016-02-29T14:10:15.099310", "description": "Com nome do presente e da pessoa", "key": "QsGdKwHbs", "input": "s\nTeste\ns\nAlgo", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-02-29T14:10:15.147170", "description": "Sem nome de pessoa e presente", "key": "UFKi0Pkrw", "input": "n\nn", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}], "date": "2016-02-29T14:10:15.204820", "name": "Mensagem de Amigo Secreto", "tags": [""], "tip": "", "publish": true, "canceled": false, "key": "OVjxry2oC", "owner": "matheusgr@gmail.com", "description": "Fa\u00e7a um programa que crie uma mensagem de amigo secreto. Este programa recebe, como entrada inicial, um `s` se a mensagem for personalizada e um `n` caso contr\u00e1rio. Se a mensagem for personalizada, deve receber o nome da pessoa como entrada seguinte. Caso n\u00e3o seja personalizada, a mensagem ir\u00e1 chamar o recepiente do presente de `pessoa`. Por fim, independente da mensagem ser personalizada ou n\u00e3o, o programa recebe uma nova entrada indicando se deseja que a mensagem tenha o nome do que \u00e9 dado de presente (entrada: `s`) ou se deseja usar um nome gen\u00e9rico pro presente (entrada: `n`). Se o nome do presente for gen\u00e9rico, a mensagem deve tratar o presente apenas como `presente`. Do contr\u00e1rio, dever\u00e1 receber como \u00faltima entrada o nome do objeto dado de presente.\n\nA imagem final tem o seguinte formato:\n```\nOi pessoa, espero que goste de receber presente!\nE Boas Festas!\n```\n\nCaso o usu\u00e1rio personalize a pessoa e escolha `Matheus` como entrada e personalize o presente e escolha `caneca` como entrada, a mensagem ser\u00e1 a seguinte:\n```\nOi Matheus, espero que goste de receber caneca!\nE Boas Festas!\n```\n\nVeja os exemplos."}, {"tests": [{"date": "2016-02-29T13:19:39.351220", "description": "Moto", "key": "SvzqwqqrQ", "input": "moto", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-02-29T13:19:39.415340", "description": "Carro", "key": "SNkRW9ziC", "input": "carro", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-02-29T13:19:39.464560", "description": "Largo", "key": "Ly8F064zw", "input": "largo", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}], "date": "2016-02-29T13:19:39.523740", "name": "Valor Estacionamento", "tags": [""], "tip": "", "publish": true, "canceled": false, "key": "NJqdW36ci", "owner": "matheusgr@gmail.com", "description": "\u00c0s vezes seu programa deve executar c\u00f3digos distintos em mais de duas situa\u00e7\u00f5es. Por exemplo, considere um programa para ensinar geometria que pede pro usu\u00e1rio escolher um dos diferentes tipos de tri\u00e2ngulos de acordo com seus lados: ESCALENO, ISOSCELES ou EQUILATERO. Dependendo da escolha do usu\u00e1rio, uma mensagem deve ser exibida explicando como \u00e9 tal tri\u00e2ngulo. Veja o programa abaixo:\n\n```\ntipo = input()\nif tipo == 'ESCALENO':\n    print(\"3 lados diferentes\")\nelse:\n    if tipo == \"ISOSCELES\":\n        print(\"2 lados iguais\")\n    else:\n        print(\"3 lados iguais\")\n```\n\nEste tipo de programa \u00e9 t\u00e3o comum que Python criou um comando adicional chamado `ELIF` que combina um `else` com um `if`. Veja o programa de cima, agora com uso de `ELIF`:\n\n```\ntipo = input()\nif tipo == 'ESCALENO':\n    print(\"3 lados diferentes\")\nelif tipo == \"ISOSCELES\":\n    print(\"2 lados iguais\")\nelse:\n    print(\"3 lados iguais\")\n```\n\nVeja que se a condi\u00e7\u00e3o do primeiro `if` n\u00e3o for satisfeita, o programa ir\u00e1 testar a condi\u00e7\u00e3o do `elif`, se ela tamb\u00e9m n\u00e3o for satisfeita, o bloco do `else` ser\u00e1 executado.\n\nFa\u00e7a um programa que calcula o valor de estacionamento mas para tr\u00eas diferentes categorias de ve\u00edculos: moto, carro ou largo. A \u00faltima categoria (largo) indica que o ve\u00edculo \u00e9 de grande porte (\u00f4nibus ou caminh\u00e3o). O valor de cada categoria \u00e9 `5`, `10` e `30` respectivamente. Veja os exemplos."}, {"tests": [{"date": "2016-02-29T13:16:11.136200", "description": "D\u00e9bito", "key": "NH7KSP3c8", "input": "10.0\ndebito", "owner": "matheusgr@gmail.com", "output": "10.0 REAIS NO DEBITO", "tip": "", "publish": true}, {"date": "2016-02-29T13:16:11.196820", "description": "Cr\u00e9dito sem parcelas", "key": "QGP8HdJyK", "input": "10.0\ncredito\nn", "owner": "matheusgr@gmail.com", "output": "10.0 REAIS NO CREDITO (DIRETO)", "tip": "", "publish": true}, {"date": "2016-02-29T13:16:11.287570", "description": "Cr\u00e9dito parcelado em 2 vezes", "key": "SU70ZZ7Oy", "input": "10.0\ncredito\ns\n2", "owner": "matheusgr@gmail.com", "output": "2 PARCELAS DE 5.0 REAIS", "tip": "", "publish": true}, {"date": "2016-02-29T13:16:11.349240", "description": "Direto no d\u00e9bito", "key": "SPe2cCEQy", "input": "2.5\ndebito", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-02-29T13:16:11.412090", "description": "Cr\u00e9dito direto", "key": "PthganRmy", "input": "2.5\ncredito\nn", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-02-29T13:16:11.514970", "description": "Cr\u00e9dito parcelado 4 vezes", "key": "SmLsTm9Oy", "input": "4.8\ncredito\ns\n4", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}], "date": "2016-02-29T13:16:11.577780", "name": "Dr\u00e9bito", "tags": [""], "tip": "", "publish": true, "canceled": false, "key": "Np8sCM6Cm", "owner": "matheusgr@gmail.com", "description": "O bloco de c\u00f3digo do comando `if/else` pode ter outros comandos como o comando de atribui\u00e7\u00e3o ou at\u00e9 mesmo outro `if/else`. Como exemplo, considere um programa que calcula o valor de um ped\u00e1gio e recebe como entrada um tipo de transporte: `passageiro` ou `carga`. Caso o ve\u00edculo esteja transportando carga, ele pede o n\u00famero de eixos e calcula o ped\u00e1gio como `eixos * 8.5`. Se o ve\u00edculo for do tipo passageiro, o programa pergunta se o ve\u00edculo \u00e9 um carro de passeio (valor do ped\u00e1gio \u00e9 de `5.5`) ou \u00f4nibus (valor do ped\u00e1gio \u00e9 `10.0`).\n\nVeja o programa que foi feito:\n```\nveiculo = input()\nif veiculo == \"passageiro\":\n    onibus_ou_carro = input()\n    if onibus_ou_carro == \"onibus\":\n        print(10.0)\n    else:\n        print(5.5)\nelse:\n    eixos = int(input())\n    print(8.5 * eixos)\n```\n\nVeja que o `if` para testar se o ve\u00edculo \u00e9 carro ou \u00f4nibus est\u00e1 dentro do `if` que verifica se \u00e9 um ve\u00edculo de passageiros, ou seja, s\u00f3 \u00e9 executado nessa condi\u00e7\u00e3o.\n\nFa\u00e7a agora um programa para testar o uso de condicionais dentro de condicionais. Considere um programa de pagamento por cart\u00e3o que recebe primeiro o valor a ser pago. Em seguida, recebe como entrada uma string com duas poss\u00edveis op\u00e7\u00f5es: `debito` ou `credito`. Quando o tipo de pagamento \u00e9 cr\u00e9dito, o cliente pode escolher parcelar (`s` na terceira entrada) ou n\u00e3o (`n` na terceira entrada). Se parcelar, o usu\u00e1rio escolhe o n\u00famero de vezes como a \u00faltima entrada do programa.\n\nSe o pagamento foi no d\u00e9bito, o programa deve imprimir `X REAIS NO DEBITO`, onde `X` \u00e9 o primeiro valor de entrada. Se foi no cr\u00e9dito, e n\u00e3o foi parcelado, o programa deve imprimir `X REAIS NO CREDITO (DIRETO)`, caso contr\u00e1rio, deve imprimir `N PARCELAS DE Y REAIS`, onde `N` \u00e9 o n\u00famero de parcelas colocado e `Y` \u00e9 o valor de cada parcela."}, {"tests": [{"date": "2016-02-29T13:08:55.197490", "description": "Palavra Grande", "key": "NUpPnjUTw", "input": "inconstitucionalissimamente", "owner": "matheusgr@gmail.com", "output": "PALAVRA GRANDE!", "tip": "", "publish": true}, {"date": "2016-02-29T13:08:55.293280", "description": "palavrinha", "key": "NajdX5X0q", "input": "oi", "owner": "matheusgr@gmail.com", "output": "palavrinha", "tip": "", "publish": true}, {"date": "2016-02-29T13:08:55.397470", "description": "Limite", "key": "Q6XLvz4Ay", "input": "aeiou", "owner": "matheusgr@gmail.com", "tip": "limite", "publish": false}, {"date": "2016-02-29T13:08:55.472270", "description": "Um abaixo do limite", "key": "QOzvH6RN2", "input": "casa", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-02-29T13:08:55.570300", "description": "Um acima do limite", "key": "PqyNX9OmO", "input": "aeiouw", "owner": "matheusgr@gmail.com", "tip": "Um acima do limite", "publish": false}], "date": "2016-02-29T13:08:55.641290", "name": "Comando Condicional", "tags": [""], "tip": "", "publish": true, "canceled": false, "key": "NkQqH1INU", "owner": "matheusgr@gmail.com", "description": "Express\u00f5es booleanas s\u00e3o express\u00f5es avaliadas (com valor) verdadeiro (`True`) ou falso (`False`). \n\nConsidere o programa abaixo:\n```\nnota = float(input())\naprovado = nota >= 7.0\nprint(aprovado)\n```\n\nObserve que o programa imprimir\u00e1 `True` se a nota for maior ou igual a 7.0 e `False` caso contr\u00e1rio. Em Python \u00e9 poss\u00edvel n\u00e3o s\u00f3 imprimir o valor dessa express\u00e3o l\u00f3gica, como \u00e9 poss\u00edvel executar comandos dependendo desse valor. Para isso usamos o comando `if` (**if** significa **se** em ingl\u00eas) e `else` (**else** significa **caso contr\u00e1rio** em ingl\u00eas).\n\nVamos alterar o programa anterior para imprimir uma mensagem mais sofisticada dependendo da entrada fornecida:\n\n```\nnota = float(input())\naprovado = nota >= 7.0\nif aprovado:\n    print(\"Nota: \" + str(nota))\n    print(\"Aprovado!\")\nelse:\n    print(\"Nota abaixo da media\")\n    print(\"Reprovado :(\")\n```\n\nObserve que entre o `if` e o `else` h\u00e1 um trecho de c\u00f3digo identado, isto \u00e9, espa\u00e7ado de forma representar um **bloco**. C\u00f3digos em bloco (i.e., mesma identa\u00e7\u00e3o) est\u00e3o no mesmo n\u00edvel e s\u00e3o executados em sequencia. Observe que dependendo do valor da nota, apenas um dos dois blocos de c\u00f3digo ser\u00e1 executado.\n\nFa\u00e7a um programa que recebe uma string como entrada e diz se a string tem 5 caracteres ou mais. Para verificar o tamanho de uma string, use a fun\u00e7\u00e3o `len` (exemplo: `len(\"aeiou\") == 5`). Caso a string satisfa\u00e7a essa condi\u00e7\u00e3o, deve ser imprimida a mensagem: `PALAVRA GRANDE!` do contr\u00e1rio, imprima a mensagem `palavrinha`. Veja os exemplos."}, {"tests": [{"date": "2016-02-24T02:38:29.981900", "description": "B\u00e1sico", "key": "LqwStejGy", "input": "Matheus\n2.0\n2.5\n3.0", "owner": "matheusgr@gmail.com", "output": "Oi Matheus!\n7.5\n15.0", "tip": "", "publish": true}, {"date": "2016-02-24T02:38:30.070830", "description": "", "key": "RVHP7JtJI", "input": "Pedro\n-1.0\n2.8\n-3.0", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}], "date": "2016-02-24T02:38:30.145990", "name": "Calculadora de 3 valores", "tags": [""], "tip": "", "publish": true, "canceled": false, "key": "NTuCd8w7s", "owner": "matheusgr@gmail.com", "description": "\u00c0s vezes \u00e9 dif\u00edcil fazer uma conta r\u00e1pida de cabe\u00e7a, mas ainda bem que o computador pode ajudar a resolver isso. O problema que voc\u00ea deve resolver \u00e9 o de fazer opera\u00e7\u00f5es com 3 n\u00fameros.\n\nSeu programa come\u00e7a recebendo uma string de entrada, ela ser\u00e1 o nome do usu\u00e1rio e serve para personalizar uma mensagem de sa\u00edda do programa. Se a entrada for `Matheus`, a mensagem de introdu\u00e7\u00e3o deve ser: \"Oi Matheus!\".\n\nEm seguida, seu programa recebe tr\u00eas valores de entrada. Voc\u00ea deve ent\u00e3o exibir a soma desses valores e a multiplica\u00e7\u00e3o desses valores. Veja o exemplo abaixo."}, {"tests": [{"date": "2016-02-24T02:35:03.533250", "description": "Teste b\u00e1sico", "key": "NW98E1mD2", "input": "7.0\n7.0\n7.0", "owner": "matheusgr@gmail.com", "output": "pass: True!", "tip": "", "publish": true}, {"date": "2016-02-24T02:35:03.628520", "description": "N\u00e3o passou", "key": "TjTacb8xU", "input": "7.0\n7.5\n8.0", "owner": "matheusgr@gmail.com", "output": "pass: False!", "tip": "", "publish": true}, {"date": "2016-02-24T02:35:03.675740", "description": "N\u00e3o passou.", "key": "Sh68WF1lI", "input": "5.1\n4.9\n5.0", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-02-24T02:35:03.722210", "description": "Passou", "key": "NHb8AqGvo", "input": "5.1\n4.9\n5.1", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}], "date": "2016-02-24T02:35:03.774220", "name": "Passou com m\u00e9dia X!", "tags": [""], "tip": "", "publish": true, "canceled": false, "key": "SSSrcEqK8", "owner": "matheusgr@gmail.com", "description": "Fa\u00e7a um programa que receba 2 notas e a m\u00e9dia necess\u00e1ria para aprova\u00e7\u00e3o. Caso o aluno tenha sido aprovado (a m\u00e9dia for pelo menos a nota indicada na entrada), exiba a mensagem: \"pass: True!\", caso contr\u00e1rio, imprima a mensagem: \"pass: False!\"."}, {"tests": [{"date": "2016-02-24T02:29:18.494960", "description": "False", "key": "SdcImdcSO", "input": "10\n10\n0.02", "owner": "matheusgr@gmail.com", "output": "False", "tip": "", "publish": true}, {"date": "2016-02-24T02:29:18.545660", "description": "Verdadeiro", "key": "R9cXXqnnE", "input": "30\n0\n0.0", "owner": "matheusgr@gmail.com", "output": "True", "tip": "", "publish": true}, {"date": "2016-02-24T02:29:18.595980", "description": "Verdadeiro", "key": "MM1nfCmWm", "input": "0\n30\n0.0", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-02-24T02:29:18.643900", "description": "Verdadeiro", "key": "MLZIxpCym", "input": "0\n0\n0.06", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-02-24T02:29:18.693420", "description": "False no Limite", "key": "RiGykjmLo", "input": "29\n29\n0.05", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-02-24T02:29:18.768350", "description": "False b\u00e1sico", "key": "SlRRwq0wK", "input": "0\n0\n0.00", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}], "date": "2016-02-24T02:29:18.825780", "name": "Blitz", "tags": [""], "tip": "", "publish": true, "canceled": false, "key": "PqhZ0T1dI", "owner": "matheusgr@gmail.com", "description": "Durante uma parada policial, os motoristas precisam ter o licenciamento do carro e a carteira de motorista vencidas por menos do que 30 dias, e o baf\u00f4metro deve indicar uma taxa menor ou igual a 0,05 ml de alc\u00f3ol por litro de sangue. Caso alguma dessas condi\u00e7\u00f5es n\u00e3o seja verdadeira o carro \u00e9 apreendido.\n\nA pol\u00edcia pede que voc\u00ea fa\u00e7a um programa que recebe 3 valores: o n\u00famero de dias que o licenciamento est\u00e1 vencido, o n\u00famero de dias que a carteira de motorista est\u00e1 vencida e o valor registrado no baf\u00f4metro. O programa deve imprimir `True` se o carro precisa ser apreendido e `False` caso contr\u00e1rio.\n\nVeja os exemplos."}, {"tests": [{"date": "2016-02-24T02:27:19.561350", "description": "Verdadeiro", "key": "NbjLnLKbo", "input": "banana", "owner": "matheusgr@gmail.com", "output": "True", "tip": "", "publish": true}, {"date": "2016-02-24T02:27:19.675760", "description": "Falso", "key": "NODPU7O7c", "input": "laranja", "owner": "matheusgr@gmail.com", "output": "False", "tip": "", "publish": true}, {"date": "2016-02-24T02:27:19.773930", "description": "Maiusculo", "key": "NlqOGs6jo", "input": "Banana", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-02-24T02:27:19.826220", "description": "N\u00famero", "key": "M0pEvMzPU", "input": "123", "owner": "matheusgr@gmail.com", "tip": "123", "publish": false}], "date": "2016-02-24T02:27:19.881420", "name": "Express\u00f5es booleanas", "tags": [""], "tip": "", "publish": true, "canceled": false, "key": "QDLsZwijA", "owner": "matheusgr@gmail.com", "description": "Al\u00e9m dos tipos int, float e str, existe um outro tipo de valor bastante utilizado em python, chama-se booleano (ou bool). O valor booleano nada mais \u00e9 do que o valor VERDADEIRO ou FALSO de express\u00f5es l\u00f3gicas. Existem duas palavras em Python para estes valores: `True` (verdade em ingl\u00eas) e `False` (falso em ingl\u00eas).\n\nEstes valores podem ser gerados em express\u00f5es que usem operadores l\u00f3gicos. Por exemplo: na express\u00e3o `2 + 2 == 4`, o operador `==` serve pra testar a igualdade entre os operandos e esta express\u00e3o \u00e9 avaliada como `True` (verdadeira).\n\nVeja alguns dos operadores l\u00f3gicos existentes e algumas opera\u00e7\u00f5es verdadeiras.\n* `==` - igual. `2 + 2 == 4`, `6 == 2 * 3`, `'banana' == 'banana'`\n* `!=` - diferente. `2 + 2 != 4`, `6 != 5`, `'banana' != laranja'`\n* `>` - maior. `5 > 4`, `3 > 1.0`\n* `>=` - maior ou igual. `0.0 >= -1`, `-2 >= -2`\n* `<` - menor. `2 < 4`, `-5 < -3`\n* `<=` - menor ou igual. `10 <= 30`, `0.0 <= 0.0`\n* `and` - operador E de l\u00f3gica. `10 < 30 and -5 > -10`, `True and True`\n* `or` - operador OU de l\u00f3gica. `10 > 30 or 10 > 5`, `True or False`\n* `not` - operador de nega\u00e7\u00e3o (inverte). `not False`, `not (1 != 1)`\n\nVeja o programa abaixo que recebe uma entrada e imprime True se a entrada \u00e9 maior que 10, ou False, caso contr\u00e1rio.\n```\nentrada = int(input)\nprint entrada > 10\n```\n\nFa\u00e7a um programa que imprime `True` se a entrada for a palavra `banana` e `False` caso contr\u00e1rio. Veja os exemplos."}, {"tests": [{"date": "2016-02-22T14:33:43.507610", "description": "", "key": "M7huFFoMi", "input": "4\n12", "owner": "matheusgr@gmail.com", "output": "83%", "tip": "", "publish": true}, {"date": "2016-02-22T14:33:43.588160", "description": "Exemplo de 6 cr\u00e9ditos", "key": "RGXz0bDUG", "input": "6\n12", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-02-22T14:33:43.647510", "description": "Dois cr\u00e9ditos", "key": "LugUm7ZC4", "input": "2\n18", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}], "date": "2016-02-22T14:33:43.734410", "name": "Porcentagem de faltas", "tags": [""], "tip": "", "publish": true, "canceled": false, "key": "U0vv1tAMC", "owner": "matheusgr@gmail.com", "description": "Uma disciplina de 4 cr\u00e9ditos tem 60 horas de aula (15 horas por cr\u00e9dito), ou seja, 72 aulas de 50 minutos. Ao final de cada disciplina o professor contabiliza quantas aulas o aluno faltou e deve avaliar se o percentual de presen\u00e7a \u00e9 superior ou inferior a 75%.\n\nFa\u00e7a um programa que receba o n\u00famero de cr\u00e9ditos de uma disciplina e o n\u00famero de aulas de 50 minutos que um aluno faltou. O seu programa deve imprimir o percentual de presen\u00e7a do aluno de forma truncada. Veja o exemplo de entrada e sa\u00edda.\n\nLembre-se, cada cr\u00e9dito equivale a 15 horas de aula, e cada 15 horas de aula s\u00e3o dadas em 18 aulas de 50 minutos."}, {"tests": [{"date": "2016-02-22T14:19:39.808310", "description": "Entrada", "key": "RC0Exu4Rs", "input": "Oi", "owner": "matheusgr@gmail.com", "output": "Oi Oi Oi ...", "tip": "", "publish": true}, {"date": "2016-02-22T14:19:39.860790", "description": "Entrada 2", "key": "Rb24Nr5NI", "input": "teste", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-02-22T14:19:39.908130", "description": "teste 4", "key": "M6psr6X9k", "input": "Matheus", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}], "date": "2016-02-22T14:19:39.983510", "name": "ECO ECo Eco eco...", "tags": [""], "tip": "", "publish": true, "canceled": false, "key": "M2I8oPO7M", "owner": "matheusgr@gmail.com", "description": "Ao codificar um jogo, voc\u00ea ficou respons\u00e1vle por criar o programa que ir\u00e1 criar o di\u00e1logo de uma caverna que produz eco.\n\nQuando uma fala \u00e9 dita nessa acaverna, ela reproduz a mensagem dita 3 vezes, seguida por tr\u00eas pontos.\n\nFa\u00e7a um program que receba uma entrada, imprima esta entrada 3 vezes (cada uma separada por espa\u00e7os, seguido por tr\u00eas pontos. Veja o exemplo de entrada e sa\u00edda abaixo.\n\nLembre-se sempre de que o seu programa deve produzir uma sa\u00edda EXATAMENTE igual a que \u00e9 apresentada."}, {"tests": [{"date": "2016-02-22T13:36:39.685840", "description": "Teste b\u00e1sico", "key": "QHFrO8mDw", "input": "10\n2", "owner": "matheusgr@gmail.com", "output": "2", "tip": "", "publish": true}, {"date": "2016-02-22T13:36:39.778040", "description": "Teste sem suco", "key": "OgCOVQWMC", "input": "20\n5", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-02-22T13:36:39.864320", "description": "Teste s\u00f3 suco", "key": "Shg5aTtcu", "input": "20\n0", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-02-22T13:36:39.911160", "description": "Teste normal 2", "key": "MXvu9TaXA", "input": "5\n1", "owner": "matheusgr@gmail.com", "output": "1", "tip": "", "publish": true}, {"date": "2016-02-22T13:36:39.960390", "description": "Teste normal 3", "key": "MNRDAE5TM", "input": "44\n5", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}], "date": "2016-02-22T13:36:40.033030", "name": "Resolu\u00e7\u00e3o de Problemas", "tags": [""], "tip": "", "publish": true, "canceled": false, "key": "SS0R1BrJw", "owner": "matheusgr@gmail.com", "description": "N\u00e3o existe um roteiro para resolver problemas, mas existe princ\u00edpios gerais para a resolu\u00e7\u00e3o de problemas. A primeira etapa \u00e9 **ENTENDER O PROBLEMA**. Para isso, h\u00e1 algumas dicas:\n\n* Identifique palavras-chave\n* Veja os exemplos\n* Identifique as partes\n* Descarte o que for in\u00fatil\n\nNa pr\u00e1tica, considere o seguinte problema:\n\n\"Todo dia Pedro vai para sua lanchonete vender sandu\u00edches e sucos. Cada suco custa 1 real e cada sandu\u00edche custa 4 reais. Ao final do dia, Pedro sabe o total que est\u00e1 em caixa e a quantidade de sandu\u00edches vendidos. Pedro n\u00e3o sabe precisamente a quantidade de sucos, pois os compradores pegam o suco direto de uma m\u00e1quina que n\u00e3o contabiliza os sucos vendidos. Considerando que todos os compradores est\u00e3o pagando por seus sucos, fa\u00e7a um programa que receba o total em caixa e a quantidade de sandu\u00edches vendidos e calcule o total de sucos vendidos. Exemplo: para a entrada `10` (caixa) e `2` (sandu\u00edches), a sa\u00edda \u00e9 `2`\".\n\nAgora vejamos o que \u00e9 importante e o que pode ser descartado:\n\n\"~~Todo dia Pedro vai para sua lanchonete vender~~ **sandu\u00edches** e **sucos**. Cada **suco** custa **1 real** e cada **sandu\u00edche** custa **4 reais**. ~~Ao final do dia,~~ Pedro sabe o total que est\u00e1 **em caixa** e a quantidade de **sandu\u00edches** vendidos. Pedro n\u00e3o sabe precisamente a quantidade de **sucos**, ~~pois os compradores pegam o suco direto de uma m\u00e1quina que n\u00e3o contabiliza os sucos vendidos. Considerando que todos os compradores est\u00e3o pagando por seus sucos~~, fa\u00e7a um programa que **receba o total em caixa e a quantidade de sandu\u00edches** vendidos e **calcule o total de sucos** vendidos. Exemplo: para a entrada `10` (caixa) e `2` (sandu\u00edches), a sa\u00edda \u00e9 `2`\".\n\nVamos ler o problema mantendo o que \u00e9 importante:\n\n\"sandu\u00edches e sucos. \nsuco 1 real\nsandu\u00edche 4 reais\nPedro sabe caixa e sandu\u00edches\nprograma: receba caixa e sandu\u00edches. calcule sucos\"\n\nCom isso em m\u00e3os, entenda o exemplo: para a entrada `10` (caixa) e `2` (sandu\u00edches), a sa\u00edda \u00e9 `2`\". Ou seja, para 10 em caixa e 2 sandu\u00edches vendidos (entrada: `10 2`), 2 sucos foram vendidos (sa\u00edda: `2`).\n\nVoc\u00ea entendeu o problema? Entendeu o exemplo? O que \u00e9 a primeira entrada, a segunda? O que \u00e9 a sa\u00edda? S\u00f3 passe adiante depois de ter entendido tudo isto.\n\nA segunda parte para resolver o problema \u00e9 fazer um plano. Para isto se pergunte como VOC\u00ca, pessoa (e n\u00e3o m\u00e1quina) resolveria este problema.\n\nSe VOC\u00ca recebesse os valores 10 de caixa e 2 sandu\u00edches vendidos, como VOC\u00ca calcularia o total de sucos vendidos? Existem diferentes maneiras de fazer um plano para resolver um problema. Veja algumas das estrat\u00e9gias (extra\u00eddo de POLYA):\n\n* Tentativa e erro\n* Descrever uma lista com cada passo\n* Eliminar o que n\u00e3o deve ser feito\n* Usar a resolu\u00e7\u00e3o de forma direta\n* Fazer um desenho\n* Resolver uma situa\u00e7\u00e3o mais simples primeiro\n* Ir de tr\u00e1s pra frente\n\nEm seguida, execute este plano criando um programa.\n\nDurante a cria\u00e7\u00e3o do programa: entenda o que \u00e9 feito a cada linha, pense em como chegar nos valores intermedi\u00e1rios para resolver seu problema. Pense em como obter cada valor intermedi\u00e1rio como um problema em si. Use depura\u00e7\u00e3o, pense em como quebrar a id\u00e9ia de alto n\u00edvel (no seu plano) em algo que o computador possa executar.\n\nPor fim, sempre reflita sobre o que foi feito.\n\nVoc\u00ea consegue fazer o c\u00f3digo do problema acima? Submeta a solu\u00e7\u00e3o deste problema. Veja o exemplo de entrada e sa\u00edda abaixo."}, {"tests": [{"date": "2016-02-22T13:13:08.558450", "description": "Teste b\u00e1sico", "key": "NOlPOThjs", "input": "2", "owner": "matheusgr@gmail.com", "output": "14", "tip": "", "publish": true}, {"date": "2016-02-22T13:13:08.648700", "description": "Teste 2", "key": "MHMlne8rQ", "input": "10", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}], "date": "2016-02-22T13:13:08.754720", "name": "Erros", "tags": [""], "tip": "", "publish": true, "canceled": false, "key": "NIIKrhAzQ", "owner": "matheusgr@gmail.com", "description": "Toda linguagem de programa\u00e7\u00e3o emite erros ao serem executadas. Estes erros n\u00e3o devem ser ignorados pois dizem muito sobre algum problema que o programa tem.\n\nVeja o primeiro programa:\n```\nentrada = input()\nprint(Entrada)\n```\n\nAo executar este programa, aparece a seguinte sa\u00edda: `NameError: name 'Entrada' is not defined on line 2`. Mensagens de erro sempre seguem o padr\u00e3o `NOME_DO_ERRO: MOTIVO`. No `MOTIVO` sempre h\u00e1 a linha do erro. Ela, em geral, indica aonde h\u00e1 um erro no programa.\n\nVeja o significado de alguns erros:\n\n* `NameError` - A var\u00edavel em quest\u00e3o n\u00e3o existe, em geral por causa de um erro de digita\u00e7\u00e3o\n* `TypeError` - O tipo utilizado para fazer determinada opera\u00e7\u00e3o \u00e9 inv\u00e1lido (exemplo: ao somar um int com str -- `1 + \"2\"`\n* `ParseError` - Erro na sint\u00e1xe do programa, `:` onde n\u00e3o deveria, ou esqueceu de fechar algum par\u00eanteses ou esqueceu de usar um operador entre dois valores (exemplo: `1 2`)\n* `EOFError` - Seu programa tenta ler algo da entrada, mas n\u00e3o tem entrada para consumir (exemplo, seu programa faz 2 inputs, mas sua entrada s\u00f3 tem 1 linha)\n* `ZeroDivisionError` - Erro ao dividir um valor por zero\n\nEsses erros s\u00e3o importantes e falam sobre seu programa! Nunca ignore tais erros. Dica: sempre veja a linha indicada no erro!\n\nUm erro bastante comum, por\u00e9m dif\u00edcil de ver \u00e9 o de equilibrar par\u00eanteses. Veja o programa abaixo:\n\n```\nentrada = input()\na = (1 + (3 * int(entrada))\nb = 2 * a\nprint(b)\n```\n\nAo tentar executar este programa, aparece a seguinte mensagem: `ParseError: bad input on line 3`. Mas observe que o erro est\u00e1 na linha 2 (um par\u00eanteses a menos!). Ent\u00e3o fique atento que, nem sempre, o erro est\u00e1 na linha indicada.\n\nSabendo agora dos erros e seus significados, submeta o c\u00f3digo do programa anterior ajeitado de forma que `a` seja igual a soma de um com o triplo do valor de entrada e que `b` seja o dobro do valor de `a`. Veja um exemplo de entrada e sa\u00edda abaixo."}, {"tests": [{"date": "2016-02-22T13:12:34.866930", "description": "Teste b\u00e1sico", "key": "Sj0OUVzm4", "input": "2", "owner": "matheusgr@gmail.com", "output": "dobro: 4, triplo: 6", "tip": "", "publish": true}, {"date": "2016-02-22T13:12:34.943800", "description": "Teste 2", "key": "NSyTEEK3c", "input": "4", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-02-22T13:12:35.031690", "description": "Teste avan\u00e7ado", "key": "MPGtVFjDE", "input": "10", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}], "date": "2016-02-22T13:12:35.114190", "name": "Express\u00f5es", "tags": [""], "tip": "", "publish": true, "canceled": false, "key": "QCT9g3lJ2", "owner": "matheusgr@gmail.com", "description": "Express\u00f5es s\u00e3o sequ\u00eancias de s\u00edmbolos que, quando interpretados (avaliados) retornam um valor. \u00c9 importante, ao criar e compor express\u00f5es analisar o tipo das entidades envolvidas.\n\nPor exemplo,  `2 + 3.5` \u00e9 uma express\u00e3o que realiza a soma do valor `2` com o valor `3.5`. Ao somar um inteiro com um n\u00famero de ponto flutuante, o valor resultante passa a ser tamb\u00e9m um ponto flutuante.\n\nExpress\u00f5es podem conter express\u00f5es tamb\u00e9m, ent\u00e3o, \u00e9 poss\u00edvel que a express\u00e3o anterior apare\u00e7a em outra express\u00e3o, como exemplo, em `3 + (2 + 3.5)`. Express\u00f5es podem ser usadas aonde um valor poderia ser usado.\n\nNeste sentido, \u00e9 poss\u00edvel que uma express\u00e3o apare\u00e7a como par\u00e2metro de uma fun\u00e7\u00e3o. Uma fun\u00e7\u00e3o espera um ou mais valores como par\u00e2metro (depende da fun\u00e7\u00e3o). Por exemplo, \u00e9 poss\u00edvel converter o resultado de uma express\u00e3o em uma string usando a fun\u00e7\u00e3o `str` e passando a express\u00e3o como par\u00e2metro (`str(3 + (2 + 3.5))`).\n\nIsso \u00e9 bastante \u00fatil quando queremos criar strings que tenham resultados de uma express\u00e3o. Por exemplo, a string `dobro do valor de entrada: 2` pode ser criada com uma express\u00e3o que some (concatene) a string `dobro do valor de entrada: ` e o valor, em string, da vari\u00e1vel que armazena o dobro da entrada (`str(dobro)`). \u00c9 poss\u00edvel at\u00e9 mesmo colocar j\u00e1 a express\u00e3o que faz a leitura da entrada e a duplica, no lugar de usar a vari\u00e1vel dobro (`str(2 * int(input()))`).\n\nConsiderando isto, fa\u00e7a um programa que, dado um valor de entrada inteiro x, deve imprimir:\n```\ndobro: y, triplo: z\n```\n\nOnde `y = 2 * x` e `z = 3 * x`. Veja o exemplo abaixo."}, {"tests": [{"date": "2016-02-17T15:27:18.787140", "description": "Divis\u00e3o b\u00e1sica", "key": "P4UmUePUu", "input": "5\n2", "owner": "matheusgr@gmail.com", "output": "divisao inteira: 2\nresto: 1\ndivisao exata: 2.5", "tip": "", "publish": true}, {"date": "2016-02-17T15:27:18.841200", "description": "Divis\u00e3o sem resto", "key": "LnCUXBpFQ", "input": "6\n3", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-02-17T15:27:18.905730", "description": "Divis\u00e3o com resto maior que 1", "key": "SxQ1KWbke", "input": "8\n3", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}], "date": "2016-02-17T15:27:18.965140", "name": "Ajuda na Divis\u00e3o", "tags": [""], "tip": "", "publish": true, "canceled": false, "key": "QgCCchCDY", "owner": "matheusgr@gmail.com", "description": "Para ajudar os alunos com a opera\u00e7\u00e3o de divis\u00e3o fa\u00e7a um programa que pega dois valores inteiros na entrada. O primeiro valor ser\u00e1 o dividendo e o segundo o divisor. O programa deve imprimir, na ordem: a parte inteira da divis\u00e3o desses dois valores, o resto dessa divis\u00e3o e o resultado da divis\u00e3o exata. Cada uma dessas sa\u00eddas deve acompanhar uma mensagem indicando o que \u00e9 esse valor. Veja o exemplo abaixo."}, {"tests": [{"date": "2016-02-17T15:26:58.114150", "description": "Teste b\u00e1sico", "key": "RF57u8vrc", "input": "3\n4", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-02-17T15:26:58.225360", "description": "Catetos iguais", "key": "ReLpZOkfA", "input": "1\n1", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-02-17T15:26:58.308060", "description": "Diferen\u00e7a grande", "key": "UAjP27R2G", "input": "2\n10", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}], "date": "2016-02-17T15:26:58.358090", "name": "Calculando a hipotenusa", "tags": [""], "tip": "", "publish": true, "canceled": false, "key": "Uh5AaBwNU", "owner": "matheusgr@gmail.com", "description": "A f\u00f3rmula da hipotenusa de um tri\u00e2ngulo reto \u00e9 bastante conhecida: `x\u00b2 = y\u00b2 + z\u00b2`, onde `x` \u00e9 a hipotenusa e `y` e `z` s\u00e3o os catetos do tri\u00e2ngulo. Fa\u00e7a um programa que receba os dois catetos e calcule e imprima o valor da hipotenusa.\n\nPara calcular o quadrado e a ra\u00edz de um n\u00famero, voc\u00ea pode utilizar o operador `**`. Para calcular um n\u00famero ao quadrado, basta usar `valor ** 2`. Uma forma de calcular a ra\u00edz utilizando o mesmo operador, \u00e9 elevar o n\u00famero a `0.5` pot\u00eancia, ou seja: `valor ** 0.5`.\n\nVeja os exemplos de entrada e sa\u00edda abaixo."}, {"tests": [{"date": "2016-02-17T15:26:51.086920", "description": "Teste b\u00e1sico", "key": "OmXkqM3G4", "input": "1234567890", "owner": "matheusgr@gmail.com", "output": "130", "tip": "", "publish": true}, {"date": "2016-02-17T15:26:51.149190", "description": "", "key": "RLQHUpCds", "input": "Outro exemplo de tweet!", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-02-17T15:26:51.217680", "description": "Entrada maior que 140", "key": "Ne3m9xQH2", "input": "0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}], "date": "2016-02-17T15:26:51.346860", "name": "Preparando um tweet", "tags": [""], "tip": "", "publish": true, "canceled": false, "key": "QFkZNtfOq", "owner": "matheusgr@gmail.com", "description": "Crie um programa que receba uma frase como entrada e imprima quantos caracteres restam at\u00e9 atingir o limite de 140 caracteres do twitter. Para calcular o tamanho de uma string, voc\u00ea pode usar a fun\u00e7\u00e3o `len`. Como exemplo, `len(\"0123456789\")` \u00e9 igual a `10`.\n\nVeja o exemplo de entrada e sa\u00edda."}, {"tests": [{"date": "2016-02-17T15:26:42.299740", "description": "Teste com o 5", "key": "SpbcSe0Z6", "input": "5", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-02-17T15:26:42.452060", "description": "Teste com o 1", "key": "SpBTpIqrQ", "input": "1", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-02-17T15:26:42.575530", "description": "Teste com o 15", "key": "NZLaQ2dZQ", "input": "15", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}], "date": "2016-02-17T15:26:42.700920", "name": "Imprimindo a tabuada", "tags": [""], "tip": "", "publish": true, "canceled": false, "key": "QMQJ21a52", "owner": "matheusgr@gmail.com", "description": "Para auxiliar os alunos na multiplica\u00e7\u00e3o, voc\u00ea deve desenvolver o software que gere a tabuada de um n\u00famero. Para gerar essa tabuada seu programa recebe um n\u00famero e imprimir a tabuada equivalente. Veja exemplo de sa\u00edda para a entrada `5`:\n\n```\n1x5 = 5\n2x5 = 10\n3x5 = 15\n4x5 = 20\n5x5 = 25\n6x5 = 30\n7x5 = 35\n8x5 = 40\n9x5 = 45\n```"}, {"tests": [{"date": "2016-02-17T15:26:31.534650", "description": "Progress\u00e3o", "key": "NnhvB1vQ8", "input": "3\n5", "owner": "matheusgr@gmail.com", "output": "3\n8\n13\n24", "tip": "", "publish": true}, {"date": "2016-02-17T15:26:31.600900", "description": "Exemplo com 2 e 2", "key": "MLaFiDw4e", "input": "2\n2", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-02-17T15:26:31.682900", "description": "Progress\u00e3o com 10 e 5", "key": "SblhJ83PM", "input": "10\n5", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}], "date": "2016-02-17T15:26:31.771650", "name": "Progress\u00e3o Aritm\u00e9tica", "tags": [""], "tip": "", "publish": true, "canceled": false, "key": "PqIcVGo4G", "owner": "matheusgr@gmail.com", "description": "Fa\u00e7a um programa que receba o termo inicial e a raz\u00e3o (inteiros) de uma progress\u00e3o aritim\u00e9tica e imprima os 3 primeiros termos dessa progress\u00e3o e a soma destes termos. Veja exemplo abaixo."}, {"tests": [{"date": "2016-02-17T15:26:20.587910", "description": "Teste b\u00e1sico", "key": "RAUenKdUm", "input": "5", "owner": "matheusgr@gmail.com", "output": "2", "tip": "", "publish": true}, {"date": "2016-02-17T15:26:20.713020", "description": "Primeiro dia fechado", "key": "Sutd48U2i", "input": "3", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-02-17T15:26:20.816610", "description": "Primeiro dia aberto", "key": "MAnKaU2nA", "input": "1", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-02-17T15:26:20.921560", "description": "Segundo dia fechado", "key": "NRvaVHim8", "input": "6", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-02-17T15:26:20.986940", "description": "Um n\u00famero grande para variar", "key": "PoROLlyAC", "input": "300", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}], "date": "2016-02-17T15:26:21.123050", "name": "Subindo o po\u00e7o", "tags": [""], "tip": "", "publish": true, "canceled": false, "key": "NUcEIysfw", "owner": "matheusgr@gmail.com", "description": "Uma lesma \u00e9 capaz de andar 3 metros por dia em uma parede. Considerando que uma lesma \u00e9 colocada no fundo de um po\u00e7o de 5 metros de profundidade, ela sair\u00e1 do po\u00e7o no segundo dia. O mesmo aconteceria se o po\u00e7o tivesse 6 metros de profundidade.\n\nConsiderando que a lesma anda 3 metros por dia, fa\u00e7a um programa que receba a profundidade do po\u00e7o (n\u00famero inteiro) e diga em qual dia a lesma ir\u00e1 sair do po\u00e7o, sendo `1` para o primeiro dia, `2` para o segundo dia, `3` para o terceiro dia...\n\nVeja o exemplo abaixo."}, {"tests": [{"date": "2016-02-17T15:26:10.547940", "description": "Teste b\u00e1sico", "key": "RLDQwz236", "input": "100.00\n0.04\n0.05\n0.06", "owner": "matheusgr@gmail.com", "output": "115.752", "tip": "", "publish": true}, {"date": "2016-02-17T15:26:10.662710", "description": "Alta infla\u00e7\u00e3o", "key": "RMOnv6OQK", "input": "200.00\n0.54\n0.45\n0.86", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-02-17T15:26:10.755580", "description": "Produto gr\u00e1tis", "key": "MBiBLKWJM", "input": "0.0\n0.01\n0.02\n0.03", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-02-17T15:26:10.852560", "description": "1 centavo inflacionado", "key": "SQ9fa19EW", "input": "0.01\n0.09\n0.083\n0.076", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}], "date": "2016-02-17T15:26:10.945430", "name": "Juros acumulados no trimeste", "tags": [""], "tip": "", "publish": true, "canceled": false, "key": "SsnsUkGS8", "owner": "matheusgr@gmail.com", "description": "Uma mercadoria sofreu reajuste em tr\u00eas meses consecutivos por causa da infla\u00e7\u00e3o. Cada reajuste feito, \u00e9 calculado em cima do valor da mercadoria no m\u00eas anterior.\n\nCrie um programa que calcula o valor final da mercadoria, considerando que o programa recebe: o valor inicial da mercadoria (ponto flutuante) e a infla\u00e7\u00e3o nos 3 meses (ponto flutuante). Veja o exemplo abaixo.\n\nLembre-se, o c\u00e1lculo do novo pre\u00e7o da mercadoria \u00e9 dada pela f\u00f3rmula: `novo_valor = valor_antigo + (valor_antigo * inflacao)`, ou seja, `novo_valor = valor_antigo * (1 + inflacao)`."}, {"tests": [{"date": "2016-02-17T15:26:01.012630", "description": "", "key": "QNYyFmGaO", "input": "2\n3", "owner": "matheusgr@gmail.com", "output": "2\n6\n18\n216", "tip": "", "publish": true}, {"date": "2016-02-17T15:26:01.141340", "description": "Teste com 5 e 5", "key": "SnDsP5mzI", "input": "5\n5", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-02-17T15:26:01.235860", "description": "Teste com 1 e 2", "key": "NS3b9dN4q", "input": "1\n2", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}], "date": "2016-02-17T15:26:01.387620", "name": "Progress\u00e3o Geom\u00e9trica", "tags": [""], "tip": "", "publish": true, "canceled": false, "key": "NTQrKrWIi", "owner": "matheusgr@gmail.com", "description": "Fa\u00e7a um programa que receba o primeiro termo e a raz\u00e3o de uma progress\u00e3o geom\u00e9trica (ambos inteiros) e imprima os 3 primeiros termos dessa raz\u00e3o e o multiplicat\u00f3rio desses termos. Veja exemplo abaixo."}, {"tests": [{"date": "2016-02-17T15:25:49.068620", "description": "Pedro", "key": "ScQxHLtho", "input": "Pedro", "owner": "matheusgr@gmail.com", "output": "Exuberante estudante Pedro, lhe tenho na mais alta estima ao ler a sua mensagem e responder que a resposta da sua pergunta encontra-se no site da disciplina.\nCordialmente,\nMatheus G.", "tip": "", "publish": true}, {"date": "2016-02-17T15:25:49.177750", "description": "Teste b\u00e1sico 2", "key": "Q1mda23wO", "input": "Aline", "owner": "matheusgr@gmail.com", "output": "Exuberante estudante Aline, lhe tenho na mais alta estima ao ler a sua mensagem e responder que a resposta da sua pergunta encontra-se no site da disciplina.\nCordialmente,\nMatheus G.", "tip": "", "publish": true}, {"date": "2016-02-17T15:25:49.308370", "description": "Teste estranho", "key": "QQ9Pv5er2", "input": "123456789", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}], "date": "2016-02-17T15:25:49.430220", "name": "Mensagem Autom\u00e1tica", "tags": [""], "tip": "", "publish": true, "canceled": false, "key": "Nj5mLFa7c", "owner": "matheusgr@gmail.com", "description": "Durante o fim de semana, os alunos mandam muitos emails pedindo para tirar d\u00favidas com o professor. Para responder automaticamente tais emails, o professor criou um programa que recebe o nome do aluno como entrada e gera uma mensagem autom\u00e1tica para o mesmo. Veja os exemplos abaixo e fa\u00e7a um programa que produza a sa\u00edda esperada."}, {"tests": [{"date": "2016-02-15T16:33:08.709200", "description": "Teste b\u00e1sico", "key": "M75pK3QP2", "input": "120\n100\n0.5", "owner": "matheusgr@gmail.com", "output": "40", "tip": "", "publish": true}, {"date": "2016-02-15T16:33:08.791740", "description": "Zero bala", "key": "QC4rSlcNk", "input": "80\n40\n0.5", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-02-15T16:33:08.872570", "description": "N\u00famero quebrado", "key": "RggHXve76", "input": "101\n100\n0.75\n", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-02-15T16:33:08.928540", "description": "Lucro muito baixo, mais balinhas", "key": "ST0MSwPWi", "input": "100\n120\n0.5", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}], "date": "2016-02-15T16:33:09.019370", "name": "Sobras do Lucro da Empresa", "tags": [""], "tip": "", "publish": true, "canceled": false, "key": "NhzwC1lbM", "owner": "matheusgr@gmail.com", "description": "Todo fim de ano, o lucro da empresa \u00e9 dividido entre os seus funcion\u00e1rios de forma inteira e as sobras s\u00e3o utilizadas para comprar balinha. Como encarregado da compra de balinhas, voc\u00ea deve criar um programa que recebe o lucro da empresa (inteiro), o n\u00famero de funcion\u00e1rios (inteiro) e o valor de uma balinha (ponto flutuante). Voc\u00ea deve calcular o n\u00famero inteiro de balas que \u00e9 poss\u00edvel comprar com as sobras da empresa. Veja o exemplo."}, {"tests": [{"date": "2016-02-15T16:32:56.251320", "description": "Teste b\u00e1sico", "key": "Np6a5Z6kC", "input": "50", "owner": "matheusgr@gmail.com", "output": "122", "tip": "", "publish": true}, {"date": "2016-02-15T16:32:56.311890", "description": "Teste com truncamento", "key": "RSMBWoZzU", "input": "26", "owner": "matheusgr@gmail.com", "output": "78", "tip": "", "publish": true}, {"date": "2016-02-15T16:32:56.364460", "description": "Teste base (0)", "key": "MOQaBP7Wy", "input": "0", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-02-15T16:32:56.450410", "description": "Teste base (100)", "key": "NRouTuW1o", "input": "100", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-02-15T16:32:56.573860", "description": "Teste negativo", "key": "MQtlUgenI", "input": "-100", "owner": "matheusgr@gmail.com", "tip": "temperaturas podem ser negativa", "publish": false}, {"date": "2016-02-15T16:32:56.669150", "description": "Teste negativo com truncamento", "key": "Nny5Gj3lQ", "input": "-101", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}], "date": "2016-02-15T16:32:56.801540", "name": "Convertendo Celsius para Fahrenheit", "tags": [""], "tip": "", "publish": true, "canceled": false, "key": "Pwk1bFcDA", "owner": "matheusgr@gmail.com", "description": "Na escala Celsius, 100\u00ba representa a temperatura em que a \u00e1gua sai do estado l\u00edquido e entra no estado gasoso quando em condi\u00e7\u00f5es normais de press\u00e3o. J\u00e1 0\u00ba representa a temperatura em que a \u00e1gua solidifica. Em Fahrenheit, estas temperaturas equivalem a 212\u00ba e 32\u00ba.\n\nAssim, sabendo que 0\u00baC equivale a 32\u00baF e que 100\u00baC equivale a 212\u00baF, crie um programa que receba como entrada um valor inteiro representando uma temperatura em graus Celsius e que imprima na sa\u00edda o valor inteiro truncado em Fahrenheit. Para truncar um valor (ou seja, ignorar a parte flutuante de um n\u00famero), vc pode usar a fun\u00e7\u00e3o `int`. Como exemplo, `int(4.5)` retorna o valor `4`.\n\nVeja o exemplo de entrada e sa\u00edda do programa."}, {"tests": [{"date": "2016-02-15T16:32:44.547970", "description": "Teste b\u00e1sico", "key": "NPROUM22C", "input": "2\n2.5", "owner": "matheusgr@gmail.com", "output": "4.5\n5.0", "tip": "", "publish": true}, {"date": "2016-02-15T16:32:44.658910", "description": "Teste com zero", "key": "MPvvqjKPg", "input": "0\n1.5", "owner": "matheusgr@gmail.com", "tip": "0", "publish": false}, {"date": "2016-02-15T16:32:44.766730", "description": "Teste com 1 e 1", "key": "MGitgELgm", "input": "1\n1.0", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}], "date": "2016-02-15T16:32:44.818050", "name": "Soma e Multiplica\u00e7\u00e3o", "tags": [""], "tip": "", "publish": true, "canceled": false, "key": "Q4hnncbWi", "owner": "matheusgr@gmail.com", "description": "Um programa pode receber valores inteiros, como valores com ponto flutuante (ex.: `4.2`). Lembre que a fun\u00e7\u00e3o `input` sempre retornar uma string e que voc\u00ea deve usar fun\u00e7\u00f5es para converter seu valor a um tipo adequado para ser manipulado.\n\nPara converter uma string em inteiro, usa-se a fun\u00e7\u00e3o `int`. E para converter de string para ponto flutuante, utiliza-se a fun\u00e7\u00e3o `float`.\n\nFa\u00e7a um programa que recebe dois valores, um inteiro e um float, e imprime a soma desses valores e, em seguida, a multiplica\u00e7\u00e3o desses valores. Veja exemplo."}, {"tests": [{"date": "2016-02-15T16:32:29.145590", "description": "Entrada b\u00e1sica", "key": "MCvEBV5mK", "input": "1", "owner": "matheusgr@gmail.com", "output": "2", "tip": "", "publish": true}, {"date": "2016-02-15T16:32:29.200690", "description": "Outro exemplo", "key": "M2GAcwgjY", "input": "2", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}, {"date": "2016-02-15T16:32:29.252290", "description": "Teste com o zero", "key": "QNp8LTOvg", "input": "0", "owner": "matheusgr@gmail.com", "tip": "O dobro de zero \u00e9 zero", "publish": false}, {"date": "2016-02-15T16:32:29.376490", "description": "Teste com um n\u00famero maior", "key": "SiMWN6CbQ", "input": "213", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}], "date": "2016-02-15T16:32:29.460420", "name": "Fun\u00e7\u00f5es: inteiro e entrada", "tags": [""], "tip": "", "publish": true, "canceled": false, "key": "QOkl0YTWy", "owner": "matheusgr@gmail.com", "description": "A maioria das linguagens procedurais, ou seja, aquelas que definem procedimentos (instru\u00e7\u00f5es) na constru\u00e7\u00e3o de um programa, apresenta uma entidade chamada de fun\u00e7\u00e3o para a manipula\u00e7\u00e3o de valores ou da entrada e sa\u00edda.\n\nUma dessas fun\u00e7\u00f5es, \u00e9 a fun\u00e7\u00e3o de impress\u00e3o, `print`, que, ao ser executada, imprime um valor na sa\u00edda do c\u00f3digo. Lembre como funciona essa fun\u00e7\u00e3o com o seguinte c\u00f3digo:\n\n```\nprint(\"coisa a ser imprimida na tela\")\n```\n\nNote que a fun\u00e7\u00e3o `print` recebe um valor, no exemplo, uma string, que chamamos de par\u00e2metro da fun\u00e7\u00e3o. Em geral, fun\u00e7\u00f5es s\u00e3o utilizadas para retornar um valor, alterar a entrada/sa\u00edda de um programa ou executar opera\u00e7\u00f5es especiais na m\u00e1quina.\n\nUm exemplo de uma fun\u00e7\u00e3o bastante utilizada \u00e9 a fun\u00e7ao `int`. Esta fun\u00e7\u00e3o recebe uma string como par\u00e2metro e retorna o valor inteiro de mesma representa\u00e7\u00e3o.\n\nVeja o c\u00f3digo abaixo:\n```\nvalor_string = \"2\"\nvalor_inteiro = int(valor_string)\nprint(valor_inteiro * 4)\n```\n\nNo exemplo anterior, ao converter a string em inteiro, foi poss\u00edvel realizar a opera\u00e7\u00e3o de multiplica\u00e7\u00e3o sobre o valor inteiro, obtendo como resultado o valor 8.\n\nOutra fun\u00e7\u00e3o de extrema import\u00e2ncia para c\u00f3digos mais simples \u00e9 a fun\u00e7\u00e3o `input`. Esta fun\u00e7\u00e3o l\u00ea um valor do teclado e retorna a string com o que foi lido.\n\nExemplo:\n```\nvalor_entrada = input()\nprint(\"O usuario digitou \" + valor_entrada)\n```\nExecute este programa e veja que, ao execut\u00e1-lo, aparece um pedido de entrada. Ao digitar uma sequencia como `123456`, o programa imprimira na sa\u00edda `O usuario digitou 123456`. Observe que a opera\u00e7\u00e3o de concatena\u00e7\u00e3o de duas strings (o `+`) foi utilizada par apoder gerar tal sa\u00edda.\n\n\u00c9 poss\u00edvel combinar o uso das fun\u00e7\u00f5es `int` e `input` para ler e operar sobre um valor inteiro em Python, como exemplo: `valor_inteiro = int(input())`.\n\nFa\u00e7a um programa que leia um valor como entrada. Considere que o usu\u00e1rio sempre digitar\u00e1 um n\u00famero inteiro. Seu programa deve imprimir o dobro deste valor. Veja um exemplo de entrada e sa\u00edda que o programa deve receber e imprimir."}, {"tests": [{"date": "2016-02-15T16:32:19.028470", "description": "", "key": "MIe5NJtey", "input": "", "owner": "matheusgr@gmail.com", "tip": "", "publish": false}], "date": "2016-02-15T16:32:19.086590", "name": "Opera\u00e7\u00f5es B\u00e1sicas", "tags": [""], "tip": "", "publish": true, "canceled": false, "key": "QGD9nWdHM", "owner": "matheusgr@gmail.com", "description": "Valores em Python podem ser de natureza distinta: inteiros, ponto flutuante, etc. Podemos realizar **opera\u00e7\u00f5es** nestes valores de forma manipul\u00e1-los para a cria\u00e7\u00e3o de novos valores.\n\nVeja o c\u00f3digo abaixo que calcula o quadrado de 5 e que subtrai esse valor do resultado da multiplica\u00e7\u00e3o entre 4, 1 e -2:\n```\ndelta = 5 ** 2 - 4 * (1 * (-2))\nprint(delta)\n```\nEssas opera\u00e7\u00f5es seguem a mesma preced\u00eancia de qualquer avalia\u00e7\u00e3o matem\u00e1tica (primeiro: tudo que est\u00e1 entre par\u00eanteses, depois ra\u00edz e pot\u00eancia, depois multiplica\u00e7\u00e3o e divis\u00e3o, por \u00faltimo soma e subtra\u00e7\u00e3o, sempre da esquerda pra direita).\n\nAssim, Python, ao ler tais opera\u00e7\u00f5es tenta descobrir qual o valor resultante. Ou seja, ele tenta **avaliar** esta express\u00e3o, gerando o resultado da mesma.\n\nInternamente, Python faz os seguintes c\u00e1lculos:\n```\n5 ** 2 - 4 * (1 * (-2))\n5 ** 2 - 4 * (1 * -2)\n5 ** 2 - 4 * (-2)\n5 ** 2 - 4 * -2\n5 ** 2 - 4 * -2\n25 - 4 * -2\n25 - -8\n33\n```\n\nAo imprimir o valor de `delta`, aparece o valor 33 como resultado.Note que voc\u00ea pode usar qualquer valor nessas express\u00f5es, inclusive vari\u00e1veis. Veja o exemplo:\n\n```\ndias = 20\nhoras_trabalhadas = 8\ntotal_de_horas = dias * horas_trabalhadas\n```\n\nPara testar o uso de opera\u00e7\u00f5es, Imprima o valor da opera\u00e7\u00e3o: `((1+2+3+4+5)*6) - 7+8+9`\n"}, {"tests": [{"date": "2016-02-15T16:32:02.360230", "description": "Base", "key": "STtnJoXeC", "input": "", "owner": "matheusgr@gmail.com", "tip": "Imprima HELLO WORLD", "publish": false}], "date": "2016-02-15T16:32:02.460220", "name": "Tipos em Python", "tags": [""], "tip": "", "publish": true, "canceled": false, "key": "PsF02Kxqy", "owner": "matheusgr@gmail.com", "description": "Um n\u00famero inteiro, como 42, \u00e9 um poss\u00edvel valor em Python. Mas este n\u00e3o \u00e9 o \u00fanico valor poss\u00edvel que uma vari\u00e1vel pode assumir. S\u00e3o exemplos de outros valores: inteiros, n\u00fameros de ponto flutuante e _strings_.\n\nN\u00fameros de ponto flutuante s\u00e3o n\u00fameros que tem casas decimais (ex.: `2.4` e `1.0`). Em Python, usamos o separador `.` para iniciar as casas decimais.\n\nStrings s\u00e3o  sequ\u00eancia de caracteres (s\u00edmbolos) que representam um texto. Estes s\u00edmbolos podem ser espa\u00e7os, n\u00fameros, par\u00eanteses, etc. Para determinar que um conjunto de s\u00edmbolos \u00e9 uma string, n\u00f3s colocamos estes s\u00edmbolos entre aspas simples ou duplas (`\"` ou `'`).\n\nVeja o exemplo abaixo de um programa que inicia quatro vari\u00e1veis, sendo um inteiro, um ponto flutuante e duas strings:\n```\nnumero_magico = 42\nmetade = 0.5\npalavra = \"UMA_PALAVRA normal 42!\"\noutra_palavra = 'OUTRA_PALAVRA normal 42!'\n```\n\nO comando `print` \u00e9 capaz de imprimir qualquer um destes diferentes tipos de valores. Fa\u00e7a um programa que imprima a string `HELLO WORLD`. Voc\u00ea pode, ou n\u00e3o, usar uma vari\u00e1vel para isto."}, {"tests": [{"date": "2016-02-15T16:29:53.397720", "description": "Base", "key": "NLCrEd8QC", "input": "", "owner": "matheusgr@gmail.com", "tip": "Imprima 42", "publish": false}], "date": "2016-02-15T16:29:53.469750", "name": "Meu primeiro programa", "tags": [""], "tip": "", "publish": true, "canceled": false, "key": "Pu2kF4CTw", "owner": "matheusgr@gmail.com", "description": "Um programa em Python \u00e9 caracterizado por uma s\u00e9rie de comandos que, executados em sequ\u00eancia, manipulam a mem\u00f3ria do computador, executam opera\u00e7\u00f5es no processador e trabalham com a entrada (teclado) e sa\u00edda (monitor) da m\u00e1quina.\n\nConsidere o seguinte programa em Python:\n```\ngasto_gasolina = 140\ndinheiro = 500\ndinheiro = dinheiro - gasto_gasolina\ndinheiro = dinheiro - gasto_casolina\nprint(dinheiro)\n```\n\nEle contem 5 instru\u00e7\u00f5es que expressam as seguintes a\u00e7\u00f5es:\n```\nmeu gasto_gasolina \u00e9 140\nmeu dinheiro \u00e9 500\nmeu dinheiro \u00e9 dinheiro atual menos gasto_gasolina (500 - 140)\nmeu dinheiro \u00e9 dinheiro atual menos gasto_gasolina (360 - 140)\nimprima dinheiro\n```\n\nA sa\u00edda esperada deste programa \u00e9 `220` (500 - 140 - 140).  Uma instru\u00e7\u00e3o como `gasto_gasolina = 140` realiza uma opera\u00e7\u00e3o de atribui\u00e7\u00e3o, ou seja, esta atribuindo um valor a uma entidade.\n\nEssa entidade, \u00e9 chamada de vari\u00e1vel, pois pode ter seu valor alterado ao longo do programa (como foi no caso da vari\u00e1vel `dinheiro`).\n\nO comando `print` \u00e9 respons\u00e1vel pela impress\u00e3o de valores na sa\u00edda do computador.\n\nO primeiro programa que voc\u00ea deve criar \u00e9 bem simples, fa\u00e7a um programa que imprima o valor `42`. Voc\u00ea pode usar, ou n\u00e3o, uma vari\u00e1vel para isto."}, {"tests": [{"date": "2015-01-25T23:40:13.785810", "description": "Basic test", "key": "NqJhlU5ZI", "input": "1", "owner": "matheusgr@gmail.com", "output": "2", "tip": "Just add one to the input. Remember, the input is always a string, you must convert it.", "publish": true}, {"date": "2015-01-25T23:40:13.925090", "description": "Additional basic test", "key": "NlhQ8huWu", "input": "2", "owner": "matheusgr@gmail.com", "tip": "Just another basic example. Nothing fancy about the input.", "publish": false}, {"date": "2015-01-25T23:40:13.985050", "description": "Zero", "key": "NcBLHyza4", "input": "0", "owner": "matheusgr@gmail.com", "tip": "Testing with zero.", "publish": false}, {"date": "2015-01-25T23:40:14.103470", "description": "Testing two digit numbers", "key": "NeH5rNDAe", "input": "10", "owner": "matheusgr@gmail.com", "tip": "You should not do any threatment for bigger numbers.", "publish": false}], "date": "2015-01-25T23:40:14.169760", "name": "Ask for input", "tags": ["raw_input", "lang:en"], "tip": "Remember about the raw_input and int functions.", "publish": true, "canceled": false, "key": "QE88w7YKu", "owner": "matheusgr@gmail.com", "description": "Programs would be rather limited if they could not interact with the user.\n\nPython provides a function that return an input given by the user. This is the `raw_input` function and there are two ways to use it. First you can just call it to obtain an user input. Example:\n\n```\nprint \"The user input is \" + raw_input()\n```\n\nThe `raw_input` will take anything that the users input in one line and return it as a string. So, if the users enters \"test\", the output of this program would be: \"The user input is test\". That function can also receive a parameter that will act as a prompt, or a clue to the user about what should be input. Example:\n\n```\nnumber = raw_input(\"Enter a number:\")\nprint \"Your number was: \" + number\n```\n\nNotice even if the user enters the number 1 as an input, the `raw_input` will return the string `1`. To convert that string to a number that can be manipulated as such by python, one should use the `int` function (example: `number = int(raw_input())`.\n\nYou can ask the user for input as many times as you want, just use the `raw_input` function multiple times. Here at Dirlididi you have TWO ways to interact with raw_input functions. The first one is the **interactive input** (enable by default), that will open a prompt box for each `raw_input` call. The second way is the **input box** that is activated when interactive input is disabled. In the **input box** each line is consumed sequentially for each `raw_input` called in your program. The later alternative is just more practical when developing programs because is a faster way to test what you are doing.\n\nSo, your first program using `raw_input` will be rather simple. You should take an input from the user without using any prompt. Such input will be a number and you must return that number plus one. Consider that the user never inputs anything different from a number. See the public tests as an example."}, {"tests": [{"date": "2015-01-25T00:07:27.899700", "description": "Simple test.", "key": "QPgDPo4lk", "input": "", "owner": "matheusgr@gmail.com", "tip": "Just use the print command.", "publish": false}], "date": "2015-01-25T00:07:27.996880", "name": "Hello Dirlididi!", "tags": ["print", "lang:en"], "tip": "Just use the print command.", "publish": true, "canceled": false, "key": "Pu656fdh2", "owner": "matheusgr@gmail.com", "description": "Create a program that will show \"Hello Dirlididi!\" as an output. To do so, you must use the `print` command. Example:\n\n```\nprint \"Hello Blargh!\"\n```\n\nThis program will produce \"Hello Blargh!\" as an output. Copy and change it to print \"Hello Dirlididi!\""}, {"tests": [{"date": "2015-01-04T18:32:13.239270", "description": "Entrada Padr\u00e3o", "key": "QCIOmveNM", "input": "1 LANCHE 1195,05\n4 ROLEZINHO 1100,22\n10 COMPREI UMA TV DE PLASMA USADA 42 POLEGADAS 402,10\n11 COMPREI UM CABO PRA TV 400,11\n12 COMPREI OUTRO CABO PRA TV 399,12\n13 MANDEI A TV PRO CONSERTO 299,12\n22 LANCHE 293,32\n25 COMPREI UMA TV NOVA DE 7 POLEGADAS 0,00", "owner": "matheusgr@gmail.com", "output": "MAIOR: COMPREI UMA TV DE PLASMA USADA 42 POLEGADAS 698,12\nDIAS: 8", "tip": "Exemplo identico ao apresentado no problema.", "publish": true}, {"date": "2015-01-04T18:32:13.323370", "description": "1 evento", "key": "NMZE2NKHg", "input": "4 COMPREI UM LAPTOP 0,00", "owner": "matheusgr@gmail.com", "tip": "Considere a possibilidade de existir apenas uma entrada", "publish": false}, {"date": "2015-01-04T18:32:13.418770", "description": "Empate eventos", "key": "SkyPzYEXg", "input": "1 LANCHE1 1100,00\n2 LANCHE2 1000,00\n3 LANCHE3 900,00\n4 LANCHE4 800,00\n5 LANCHE5 700,00\n6 LANCHE6 600,00\n7 LANCHE7 500,00\n8 LANCHE8 400,00\n9 LANCHE9 300,00\n10 LANCHE10 200,00\n11 LANCHE11 100,00\n13 LANCHE12 0,00", "owner": "matheusgr@gmail.com", "tip": "Em caso de mais de 1 evento com mesmo custo, apresente o primeiro da lista", "publish": false}, {"date": "2015-01-04T18:32:13.476790", "description": "1 evento 0 dias", "key": "RCwufxv7o", "input": "1 DOEI PARA UM ABRIGO 0,00", "owner": "matheusgr@gmail.com", "tip": "\u00c9 poss\u00edvel gastar toda bolsa no primeiro dia (zero dias sem gasto)", "publish": false}, {"date": "2015-01-04T18:32:13.534880", "description": "2 evento 0 dias", "key": "NSMglWaY4", "input": "1 DOEI PARA UM ABRIGO 100,00\n2 LANCHEI 0,00", "owner": "matheusgr@gmail.com", "tip": "\u00c9 poss\u00edvel que n\u00e3o haja dias sem gatos", "publish": false}, {"date": "2015-01-04T18:32:13.595130", "description": "Maior evento no final", "key": "Lz0MpuZLk", "input": "1 LANCHE1 1100,00\n2 LANCHE2 1000,00\n3 LANCHE3 900,00\n4 LANCHE4 800,00\n5 LANCHE5 700,00\n6 LANCHE6 600,00\n7 LANCHE7 500,00\n8 LANCHE8 400,00\n9 LANCHE9 300,00\n10 LANCHE10 200,01\n13 LANCHE12 0,00", "owner": "matheusgr@gmail.com", "tip": "O maior evento pode estar ser o \u00faltimo a ter sido colocado", "publish": false}, {"date": "2015-01-04T18:32:13.682530", "description": "Maior evento no come\u00e7o", "key": "MLDpNoRYO", "input": "2 LANCHE2 1000,99\n3 LANCHE3 900,00\n4 LANCHE4 800,00\n5 LANCHE5 700,00\n6 LANCHE6 600,00\n7 LANCHE7 500,00\n8 LANCHE8 400,00\n9 LANCHE9 300,00\n10 LANCHE10 200,00\n12 LANCHE11 100,00\n13 LANCHE12 0,00", "owner": "matheusgr@gmail.com", "tip": "O maior gasto pode acontecer no primeiro evento", "publish": false}], "date": "2015-01-04T18:32:13.754110", "name": "Gasto da Bolsa de Monitoria", "tags": ["while", "lang:pt"], "tip": "\u00c9 importante observar que \u00e9 registrado diariamente o quanto SOBRA da bolsa (e n\u00e3o o gasto).", "publish": true, "canceled": false, "key": "SmrS4gIT2", "owner": "matheusgr@gmail.com", "description": "Considere um estudante de computa\u00e7\u00e3o que recebe uma bolsa de monitoria de R$1200,00. Para controlar seu gasto mensal, esse aluno anotava o quanto restava da bolsa a cada dia depois de seu recebimento (a bolsa \u00e9 recebida no dia 1) e a descri\u00e7\u00e3o do evento mais custoso do dia. H\u00e1 dias que o aluno n\u00e3o gasta o dinheiro da bolsa, h\u00e1 apenas uma entrada para cada dia e a entrada sempre termina com a bolsa zerada. Exemplo:\n\n```\n1 LANCHE 1195,05\n4 ROLEZINHO 1100,22\n10 COMPREI UMA TV DE PLASMA USADA 42 POLEGADAS 402,10\n11 COMPREI UM CABO PRA TV 400,11\n12 COMPREI OUTRO CABO PRA TV 399,12\n13 MANDEI A TV PRO CONSERTO 299,12\n22 LANCHE 293,32\n25 COMPREI UMA TV NOVA DE 7 POLEGADAS 0,00\n```\n\nPede-se que voc\u00ea receba estes dados e calcule como sa\u00edda:\n* o evento mais custoso apresentado e o valor desse gasto (em caso de empate, apresente o primeiro evento)\n* o maior n\u00famero de dias consecutivos sem despesas depois do recebimento da bolsa ou depois de um gasto\n\nPara a entrada acima, \u00e9 exemplo de sa\u00edda:\n```\nMAIOR: COMPREI UMA TV DE PLASMA USADA 42 POLEGADAS 698,12\nDIAS: 8\n```"}, {"tests": [{"date": "2015-01-02T03:56:29.465650", "description": "Todos os acontecimentos presentes.", "key": "QDhjSCXxo", "input": "1 APITO\n5 FALTA CASA\n12 FALTA CONVIDADO\n17 GOL CASA\n20 GOL CASA\n21 GOL CONVIDADO\n48 FIM", "owner": "matheusgr@gmail.com", "output": "2 GOL CASA\n1 GOL CONVIDADO\n1 FALTA CASA\n1 FALTA CONVIDADO", "tip": "Todos os acontecimentos est\u00e3o presentes neste exemplo b\u00e1sico.", "publish": true}, {"date": "2015-01-02T03:56:29.638540", "description": "Sem falta do time da casa", "key": "NbGJq3YDA", "input": "1 APITO\n4 FALTA CONVIDADO\n17 GOL CASA\n20 GOL CASA\n21 GOL CONVIDADO\n48 FIM", "owner": "matheusgr@gmail.com", "tip": "Entrada sem falta do time da casa", "publish": false}, {"date": "2015-01-02T03:56:29.738900", "description": "Sem falta do time convidado", "key": "NYuFVTNZ2", "input": "1 APITO\n14 FALTA CASA\n17 GOL CASA\n20 GOL CASA\n21 GOL CONVIDADO\n48 FIM", "owner": "matheusgr@gmail.com", "tip": "Entrada sem falta do time convidado", "publish": false}, {"date": "2015-01-02T03:56:29.806670", "description": "Sem gol do time da casa", "key": "NDPDpjdpY", "input": "1 APITO\n5 FALTA CASA\n12 FALTA CONVIDADO\n21 GOL CONVIDADO\n48 FIM", "owner": "matheusgr@gmail.com", "tip": "Entrada sem gol do time da casa", "publish": false}, {"date": "2015-01-02T03:56:29.866440", "description": "Sem gol do time convidado", "key": "M1onDxdy4", "input": "1 APITO\n5 FALTA CASA\n12 FALTA CONVIDADO\n17 GOL CASA\n20 GOL CASA\n48 FIM", "owner": "matheusgr@gmail.com", "tip": "Entrada sem gol do time convidado", "publish": false}, {"date": "2015-01-02T03:56:29.921670", "description": "Entrada sem gols/faltas", "key": "SQdzWmQGO", "input": "1 APITO\n48 FIM", "owner": "matheusgr@gmail.com", "tip": "Partida sem falta/gols", "publish": false}, {"date": "2015-01-02T03:56:29.975890", "description": "Final da partida num tempo diferente", "key": "Nd9LvBc8W", "input": "1 APITO\n15 FALTA CASA\n22 FALTA CONVIDADO\n27 GOL CASA\n30 GOL CASA\n31 GOL CONVIDADO\n54 FIM", "owner": "matheusgr@gmail.com", "tip": "Tempo termina num valor diferente do exemplo", "publish": false}, {"date": "2015-01-02T03:56:30.038640", "description": "Partida com outros eventos", "key": "QKa8x5fO4", "input": "1 APITO\n5 FALTA CASA\n12 ESCANTEIO CONVIDADO\n15 ESCANTEIO CASA\n17 GOL CASA\n20 GOL CASA\n21 GOL CONVIDADO\n30 TEMPO\n48 FIM", "owner": "matheusgr@gmail.com", "tip": "Outros eventos devem ser ignorados", "publish": false}], "date": "2015-01-02T03:56:30.154030", "name": "Partida de Futebol Minuto a Minuto", "tags": ["lang:pt", "while"], "tip": "Pense na condi\u00e7\u00e3o de sa\u00edda do programa (FIM) e avalie cada acontecimento relevante (FALTA, GOL) para exibir na sa\u00edda.", "publish": true, "canceled": false, "key": "Q9TyOsZl2", "owner": "matheusgr@gmail.com", "description": "Um funcion\u00e1rio \u00e9 respons\u00e1vel por descrever os acontecimentos da partida minuto a minuto. Para cada um dos tempos da partida o funcion\u00e1rio insere a descri\u00e7\u00e3o do que est\u00e1 acontecendo no formato `MINUTO ACONTECIMENTO TIME`, onde `TIME` \u00e9 uma palavra opcional que pode ser **CASA** ou **CONVIDADO** quando for necess\u00e1rio para descrever o `ACONTECIMENTO`. Exemplo:\n\n    1 APITO\n    5 FALTA CASA\n    12 ESCANTEIO CONVIDADO\n    17 GOL CASA\n    20 GOL CASA\n    21 GOL CONVIDADO\n    48 FIM\n\nTodo come\u00e7o de tempo \u00e9 marcado com `APITO`. Todo final de tempo \u00e9 marcado com `FIM`.\n\nPara auxiliar este funcion\u00e1rio na gera\u00e7\u00e3o de estat\u00edsticas para an\u00e1lise do ocorrido num tempo de futebol, pede-se que voc\u00ea, dada a entrada no modelo acima, gere uma breve descri\u00e7\u00e3o do ocorrido na partida no seguinte formato (considerando o exemplo acima):\n\n    2 GOL CASA\n    1 GOL CONVIDADO\n    1 FALTA CASA\n    0 FALTA CONVIDADO\n\nOutros eventos (escanteios, cart\u00f5es, substitui\u00e7\u00f5es, etc.) podem ocorrer, mas devem ser ignorados. \u00c9 importante apresentar as estat\u00edticas na ordem espec\u00edficada acima. A entrada ser\u00e1 composta de eventos de apenas 1 dos tempos da partida."}, {"tests": [{"date": "2014-12-31T00:26:15.118430", "description": "Teste \u00fanico", "key": "PmYUlTPea", "input": "", "owner": "matheusgr@gmail.com", "output": "Hello Dirlididi!", "tip": "Fa\u00e7a o que indica na quest\u00e3o", "publish": true}], "date": "2014-12-31T00:26:15.345620", "name": "Hello Dirlididi!", "tags": ["lang:pt", "print"], "tip": "Use o print", "publish": true, "canceled": false, "key": "Q8lIaDijI", "owner": "matheusgr@gmail.com", "description": "Crie um programa em python que imprima \"Hello Dirlididi!\" (sem as aspas). Para isto, lembre-se do comando print.\n\nExemplo:\n\n    print \"Hello Blargh!\""}]